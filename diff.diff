diff --git a/config.yml b/config.yml
index 4a321d0..21fae0a 100644
--- a/config.yml
+++ b/config.yml
@@ -1,17 +1,17 @@
 webstats:
-    enable: true
-    action: "www.somescript.com/dothis.php"
-    secret: "abcdef12345"
-    position: 0
+  enable: true
+  action: "www.somescript.com/dothis.php"
+  secret: "abcdef12345"
+  position: 0
 settings:
-    maps_repo: "~/path/to/maps"
-    voteTime: 26
-    cycleTime: 30
-    startTime: 30
+  maps_repo: "/home/founders/repo/maps"
+  voteTime: 30
+  cycleTime: 30
+  startTime: 30
 database:
-    enabled: true
-    username: "user"
-    password: "pass"
-    database: "war"
-    hostname: "localhost"
-    port: 3306
\ No newline at end of file
+  enabled: true
+  username: "jj"
+  password: "S^yL?dX5@a9L"
+  database: "mira"
+  hostname: "core.mira.sbs"
+  port: 5432
\ No newline at end of file
diff --git a/messages.yml b/messages.yml
index 246b15e..700522d 100644
--- a/messages.yml
+++ b/messages.yml
@@ -1,19 +1,27 @@
 prelogin:
-    error: "&cAn error occurred logging you in.\nPlease try again later."
+  error: "&cAn error occurred logging you in.\nPlease try again later."
 killstreaks:
-    status: "You are running a killstreak of {0}."
-    onfire: "{0} is on fire!"
+  status: "You are running a killstreak of {0}."
+  onfire: "{0} is on fire!"
 votes:
-    starting: "A vote is now being held.\nHover over a Gamemode for more information:"
-    next: "The next match was {0} {1} at {2}!"
+  starting: "A vote is now being held.\nHover over a Gamemode for more information:"
+  next: "The next match was {0} {1} at {2}!"
 votifier:
-    self: "You voted and received a revive. Thank you!"
-    others: "{0} &fvoted and received a free revive! (/vote)"
+  self: "You voted and received a revive. Thank you!"
+  others: "{0} &fvoted and received a free revive! (/vote)"
 guard:
-    building: "You cannot build on this map."
-    border: "Build inside the map border!"
-    highest: "You cannot build any higher."
+  building: "You cannot build on this map."
+  border: "Build inside the map border!"
+  highest: "You cannot build any higher."
 match:
-    teams:
-        full: "All teams are full. Please try joining later."
-        join: "You have joined the {0}!"
\ No newline at end of file
+  teams:
+    full: "All teams are full. Please try joining later."
+    join: "You have joined the {0}!"
+command:
+  validation:
+    error:
+      generic: "&c{0}. ;-;"
+      permission: "&cyou do not have permission. ;-;"
+      usage: "&c{0}.\n&cusage: {1}. ^_^"
+      number:
+        format: "&cplease provide a valid numerical value. :/"
\ No newline at end of file
diff --git a/plugin.yml b/plugin.yml
index e9a3ea4..b151d76 100644
--- a/plugin.yml
+++ b/plugin.yml
@@ -1,5 +1,5 @@
-name: War
-main: au.edu.swin.war.Main
-author: [ILavaYou]
+name: pvp.mira.sbs
+main: sbs.mira.pvp.Main
+author: [Kawi]
 depend: [Skytopia]
 version: 1.1
\ No newline at end of file
diff --git a/pom.xml b/pom.xml
index db84f09..f0b6c54 100644
--- a/pom.xml
+++ b/pom.xml
@@ -1,106 +1,100 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://maven.apache.org/POM/4.0.0"
          xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
-    <modelVersion>4.0.0</modelVersion>
-    <groupId>au.edu.swin.war</groupId>
-    <artifactId>War</artifactId>
-    <version>1.1-SNAPSHOT</version>
-    <description>The implementation of War to fulfil HDT3.1 requirements.</description>
+  <modelVersion>4.0.0</modelVersion>
+  <groupId>sbs.mira</groupId>
+  <artifactId>pvp.mira.sbs</artifactId>
+  <version>0.0.1-infdev</version>
+  <description>custom minecraft pvp with soul.</description>
 
-    <packaging>jar</packaging>
+  <packaging>jar</packaging>
 
-    <properties>
-        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
-        <main.class>au.edu.swin.war.Main</main.class>
-    </properties>
+  <properties>
+    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
+    <main.class>sbs.mira.pvp.MiraPvpPlugin</main.class>
+  </properties>
 
-    <build>
-        <finalName>${project.name}</finalName>
-        <sourceDirectory>${basedir}/src</sourceDirectory>
-        <resources>
-            <resource>
-                <targetPath>.</targetPath>
-                <filtering>true</filtering>
-                <directory>${basedir}/</directory>
+  <build>
+    <finalName>${project.name}</finalName>
+    <sourceDirectory>${basedir}/src</sourceDirectory>
+    <resources>
+      <resource>
+        <targetPath>.</targetPath>
+        <filtering>true</filtering>
+        <directory>${basedir}/</directory>
+        <includes>
+          <include>plugin.yml</include>
+          <include>config.yml</include>
+          <include>messages.yml</include>
+        </includes>
+      </resource>
+    </resources>
+    <plugins>
+      <plugin>
+        <groupId>org.apache.maven.plugins</groupId>
+        <artifactId>maven-compiler-plugin</artifactId>
+        <version>2.3.2</version>
+        <configuration>
+          <source>24</source>
+          <target>24</target>
+        </configuration>
+      </plugin>
+      <plugin>
+        <groupId>org.apache.maven.plugins</groupId>
+        <artifactId>maven-shade-plugin</artifactId>
+        <version>2.2</version>
+        <executions>
+          <execution>
+            <phase>package</phase>
+            <goals>
+              <goal>shade</goal>
+            </goals>
+            <configuration>
+              <artifactSet>
                 <includes>
-                    <include>plugin.yml</include>
-                    <include>config.yml</include>
-                    <include>messages.yml</include>
+                  <include>com.sk89q:command-framework-bukkit</include>
                 </includes>
-            </resource>
-        </resources>
-        <plugins>
-            <plugin>
-                <groupId>org.apache.maven.plugins</groupId>
-                <artifactId>maven-compiler-plugin</artifactId>
-                <version>2.3.2</version>
-                <configuration>
-                    <source>1.8</source>
-                    <target>1.8</target>
-                </configuration>
-            </plugin>
-            <plugin>
-                <!-- Shade plugin: Used to include sk89q's command framework/war framework into the jar -->
-                <groupId>org.apache.maven.plugins</groupId>
-                <artifactId>maven-shade-plugin</artifactId>
-                <version>2.2</version>
-                <executions>
-                    <execution>
-                        <phase>package</phase>
-                        <goals>
-                            <goal>shade</goal>
-                        </goals>
-                        <configuration>
-                            <artifactSet>
-                                <includes>
-                                    <include>com.sk89q:command-framework-bukkit</include>
-                                    <include>au.edu.swin.war:Framework</include>
-                                </includes>
-                            </artifactSet>
-                        </configuration>
-                    </execution>
-                </executions>
-            </plugin>
-        </plugins>
-    </build>
-    <repositories>
-        <repository>
-            <id>spigot-repo</id>
-            <url>https://hub.spigotmc.org/nexus/content/groups/public/</url>
-        </repository>
-    </repositories>
-    <dependencies>
-        <dependency>
-            <groupId>au.edu.swin.war</groupId>
-            <artifactId>Framework</artifactId>
-            <version>1.0-SNAPSHOT</version>
-        </dependency>
-        <dependency>
-            <groupId>org.spigotmc</groupId>
-            <artifactId>spigot-api</artifactId>
-            <version>1.12.2-R0.1-SNAPSHOT</version>
-        </dependency>
-        <dependency>
-            <groupId>org.bukkit</groupId>
-            <artifactId>craftbukkit</artifactId>
-            <version>1.12.2-R0.1-SNAPSHOT</version>
-        </dependency>
-        <dependency>
-            <groupId>com.sk89q</groupId>
-            <artifactId>command-framework-bukkit</artifactId>
-            <version>1.9-SNAPSHOT</version>
-        </dependency>
-        <dependency>
-            <groupId>com.vexsoftware</groupId>
-            <artifactId>nuvotifier-universal</artifactId>
-            <version>2.3.1</version>
-            <systemPath>${project.basedir}/resources/votifier.jar</systemPath>
-            <scope>system</scope>
-        </dependency>
-    </dependencies>
+              </artifactSet>
+            </configuration>
+          </execution>
+        </executions>
+      </plugin>
+    </plugins>
+  </build>
+  <repositories>
+    <repository>
+      <id>spigot-repo</id>
+      <url>https://hub.spigotmc.org/nexus/content/repositories/snapshots/</url>
+    </repository>
+  </repositories>
+  <dependencies>
+    <dependency>
+      <groupId>org.spigotmc</groupId>
+      <artifactId>spigot</artifactId>
+      <version>1.21.8-R0.1-SNAPSHOT</version>
+      <scope>provided</scope>
+    </dependency>
+    <dependency>
+      <groupId>org.bukkit</groupId>
+      <artifactId>craftbukkit</artifactId>
+      <version>1.21.8-R0.1-SNAPSHOT</version>
+      <scope>provided</scope>
+    </dependency>
+    <dependency>
+      <groupId>com.sk89q</groupId>
+      <artifactId>command-framework-bukkit</artifactId>
+      <version>1.9-SNAPSHOT</version>
+    </dependency>
+    <dependency>
+      <groupId>org.jetbrains</groupId>
+      <artifactId>annotations</artifactId>
+      <version>RELEASE</version>
+      <scope>compile</scope>
+    </dependency>
+  </dependencies>
 
-    <issueManagement>
-        <system>GitHub</system>
-        <url>https://github.com/outspier/War</url>
-    </issueManagement>
+  <issueManagement>
+    <system>GitHub</system>
+    <url>https://github.com/mira-sbs/pvp.mira.sbs</url>
+  </issueManagement>
 </project>
\ No newline at end of file
diff --git a/src/sbs/mira/pvp/MiraPvp.java b/src/sbs/mira/pvp/MiraPvp.java
index 5dcc1b6..96a7e4e 100644
--- a/src/sbs/mira/pvp/MiraPvp.java
+++ b/src/sbs/mira/pvp/MiraPvp.java
@@ -1,7 +1,14 @@
 package sbs.mira.pvp;
 
+import org.jetbrains.annotations.NotNull;
+import sbs.mira.pvp.framework.MiraPlugin;
+import sbs.mira.pvp.framework.MiraPluginMaster;
+import sbs.mira.pvp.framework.MiraState;
 import sbs.mira.pvp.framework.WarPlayer;
 import sbs.mira.pvp.framework.util.Mira;
+import sbs.mira.pvp.framework.util.modules.ItemUtility;
+import sbs.mira.pvp.framework.util.modules.StringUtility;
+import sbs.mira.pvp.framework.util.modules.WorldUtility;
 import sbs.mira.pvp.stats.WarStats;
 import sbs.mira.pvp.util.Cache;
 import sbs.mira.pvp.util.Guard;
@@ -20,10 +27,7 @@ import org.bukkit.inventory.meta.BookMeta;
 import org.bukkit.inventory.meta.ItemMeta;
 import org.bukkit.potion.PotionEffectType;
 
-import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.List;
-import java.util.UUID;
+import java.util.*;
 
 /**
  * An extension to WarManager.
@@ -36,209 +40,197 @@ import java.util.UUID;
  * Created by Josh on 20/04/2017.
  * @since 1.0
  */
-public class Manager extends Mira {
-
-    private final Match matchutil; // An instance of the match controller.
-    private final Cache cacheutil; // An instance of the cache.
-    private final RespawnUtility respawnutil; // An instance of the respawning utility.
-    private final EntityUtility entiutil; // An instance of the entity utility.
-    private final ConfigUtility confutil; // An instance of the configuration utility.
-    private final QueryUtility qryutil; // An instance of the database utility.
-
-    private final ArrayList<UUID> warned; // Keeps track of warning messages for players.
-    private final HashMap<UUID, WarStats> tempStats; // Holds statistics for a player until they log in.
-
-    private ItemStack HANDBOOK; // Needs to be created in its own function because it's HELLA huge.
-    ItemStack VOTE;
-    ItemStack SKYBLOCK;
-
-    /**
-     * Creates an instance of this class.
-     * Must be called in onEnable();
-     *
-     * @param plugin Instance of main plugin. Must extend WarPlugin.
-     */
-    public Manager(MiraPvpPlugin plugin) {
-        super(plugin);
-        // Initialize everything.
-        this.cacheutil = new Cache(this);
-        this.matchutil = new Match(this);
-        this.respawnutil = new RespawnUtility(this);
-        this.entiutil = new EntityUtility(this);
-        this.confutil = new ConfigUtility(this);
-        this.qryutil = new QueryUtility(this, plugin.getConfig().getBoolean("database.enabled"));
-        new Guard(this); // Guard does not need a reference so just initialize it.
-        new StatsListener(this); // Stats Listener does not need a reference so just initialize it.
-
-        warned = new ArrayList<>();
-        tempStats = new HashMap<>();
-        // Task that allows players to receive a warning message every 3 seconds.
-        // Clear warnings.
-        Bukkit.getScheduler().runTaskTimer(plugin, warned::clear, 0L, 60L);
-        createItems();
-    }
-
-    /**
-     * Returns a running instance of the extended Match manager.
-     *
-     * @return Match manager.
-     */
-    public Match match() {
-        return matchutil;
-    }
-
-    /**
-     * Returns a running instance of the extended Cache.
-     *
-     * @return Cache.
-     */
-    public Cache cache() {
-        return cacheutil;
-    }
-
-    /**
-     * Returns a running instance of the respawn utility.
-     *
-     * @return Respawn utility.
-     */
-    public RespawnUtility respawn() {
-        return respawnutil;
-    }
-
-    /**
-     * Returns a running instance of the entity utility.
-     *
-     * @return Entity utility.
-     */
-    public EntityUtility entity() {
-        return entiutil;
-    }
-
-    /**
-     * Returns a running instance of the configuration utility.
-     *
-     * @return Configuration utility.
-     */
-    public ConfigUtility conf() {
-        return confutil;
-    }
-
-    /**
-     * Returns a running instance of the query utility.
-     *
-     * @return Query utility.
-     */
-    public QueryUtility query() {
-        return qryutil;
-    }
-
-    /**
-     * Temporarily holds onto a player's statistics
-     * without necessarily having a WarPlayerPlus
-     * instance created yet. (pre login)
-     *
-     * @param uuid      UUID associated with the stats.
-     * @param tempStats Actual stats.
-     */
-    void putTempStats(UUID uuid, WarStats tempStats) {
-        this.tempStats.put(uuid, tempStats);
-    }
-
-    /**
-     * Creates an instance of a WarPlayer for a player.
-     *
-     * @param target The target to base the WarPlayer object on.
-     */
-    public WarPlayer craftWarPlayer(Player target) {
-        WarStats stats = tempStats.getOrDefault(target.getUniqueId(), new WarStats(this, target.getUniqueId())); // Get their stats, or create new ones.
-        tempStats.remove(target.getUniqueId()); // Remove their pre-login storage stats.
-        WarPlayer result = new WarPlayerPlus(target, this, stats); // Create their instance.
-        getWarPlayers().put(target.getUniqueId(), result); // Put it in the key/value set!
-        return result;
-    }
-
-    /**
-     * Checks if a player can be warned, and then warns them.
-     *
-     * @param whoWasWarned Who was warned. (lol)
-     */
-    public void warn(Player whoWasWarned, String warning) {
-        if (warned.contains(whoWasWarned.getPlayer().getUniqueId())) return;
-        warned.add(whoWasWarned.getPlayer().getUniqueId());
-        whoWasWarned.sendMessage("TIP: " + warning);
-    }
-
-    /**
-     * Returns a message from a selected key, and then replaces
-     * the placeholders with relevant string data.
-     *
-     * @param key          Message key.
-     * @param replacements Replacement phrases.
-     * @return The resulting string.
-     */
-    public String message(String key, Object... replacements) {
-        int i = 0;
-        String result = ChatColor.translateAlternateColorCodes('&', conf().getMessage(key));
-        while (result.contains("{" + i + "}")) {
-            result = result.replace("{" + i + "}", String.valueOf(replacements[i].toString()));
-            i++;
-        }
-        return result;
-    }
-
-    /**
-     * Gives a targeted player the spectator kit.
-     * This isn't needed, but it might be later.
-     *
-     * @param wp The target player.
-     * @since 1.0
-     */
-    @Deprecated /* See WarManager for deprecation reason */
-    public void giveSpectatorKit(WarPlayer wp) {
-        wp.getPlayer().getInventory().setHeldItemSlot(4);
-        wp.getPlayer().getInventory().setItem(4, HANDBOOK);
-        wp.getPlayer().getInventory().setItem(0, SKYBLOCK);
-        wp.getPlayer().getInventory().setItem(1, VOTE);
-    }
-
-    /**
-     * Creates the handbook because the process of
-     * doing so consumes lines like no tomorrow.
-     * All other items too why not.
-     */
-    private void createItems() {
-        HANDBOOK = new ItemStack(Material.WRITTEN_BOOK);
-        BookMeta bookMeta = (BookMeta) HANDBOOK.getItemMeta();
-        bookMeta.setTitle(ChatColor.BOLD + "War: The Basics");
-        bookMeta.setAuthor("War Administration");
-        bookMeta.setGeneration(BookMeta.Generation.TATTERED);
-
-        List<String> pages = new ArrayList<>();
-        pages.add(ChatColor.translateAlternateColorCodes('&', "&lWar: The Basics\n&0Hey there, player!\n\nBook Contents:\n&ci.&0 Overview\n&9ii.&0 Commands\n&6iii.&0 Players\n&aiv.&0 Rules\n\nIf you're &cnew&0, read through me and then\n       &nHAVE FUN!\n\n&0  »»»"));
-        pages.add(ChatColor.translateAlternateColorCodes('&', "&oPart I. An Overview\n&0Welcome to War!\n\nThis is a &5team-based &0strategy PvP server!\nWork with your &4team mates &0to win matches.\n\nThere's a &agamemode &0tosuit everyone's play style!\n\n\n&0     »»»"));
-        pages.add(ChatColor.translateAlternateColorCodes('&', "&oPart II. Commands\n\nStart Playing!\n&c/join &0- &9/leave\n&0What's up next?\n&4/rotation\n&0Have your say!\n&a/vote &0<gamemode>\nStatistics!\n&6/stats &0+ &7/leaderboard\n\n&0Or, &n/? War\n\n&0        »»»"));
-        pages.add(ChatColor.translateAlternateColorCodes('&', "&oPart III. Players\n&0You'll see these people online!\n\n&oStaff:\n&6@&8Administrator\n&5@&8Moderator\n\n&0&oOther Ranks:\n&a#&8Donator\n&e#&8DonatorPlus\n&4#&8MapCreator\n\n&0           »»»"));
-        pages.add(ChatColor.translateAlternateColorCodes('&', "&oPart IV. Rules\n&0Follow these!\n\n&ci. &0Don't be a dick.\n&9ii. &0Play the game.\n&4iii. &0Don't cheat.\n&6iv. &0Don't combat log.\n&2v. &0Be a good sport.\n&5vi. &0Don't spawncamp.\n&8vii. &0Listen to @Staff\n&7viii. &0Have fun!\n\n\n&0              »»»"));
-        pages.add(ChatColor.translateAlternateColorCodes('&', "&oNow, go get 'em!\n\n&0We encourage players to use &4common sense &0whilst playing. Have a safe, sensible, and &dfun &cWar!\n\n&0- Administration\n\n\n\n\n                  X"));
-        bookMeta.setPages(pages);
-        HANDBOOK.setItemMeta(bookMeta);
-
-        SKYBLOCK = new ItemStack(Material.EYE_OF_ENDER);
-        ItemMeta sbMeta = SKYBLOCK.getItemMeta();
-        sbMeta.setDisplayName(ChatColor.BOLD + "To: Skyblock");
-        List<String> lore = new ArrayList<>();
-        lore.add(ChatColor.GRAY + "Right click to return");
-        lore.add(ChatColor.GRAY + "to the Skyblock server!");
-        sbMeta.setLore(lore);
-        SKYBLOCK.setItemMeta(sbMeta);
-
-        VOTE = items().createPotion(PotionEffectType.HEAL, 0,0, 1);
-        ItemMeta voteMeta = VOTE.getItemMeta();
-        voteMeta.setDisplayName(ChatColor.BOLD + "Vote For Us!");
-        lore.clear();
-        lore.add(ChatColor.GRAY + "Right click to reaveal the");
-        lore.add(ChatColor.GRAY + "voting link. Earn rewards!");
-        voteMeta.setLore(lore);
-        VOTE.setItemMeta(voteMeta);
-    }
+public class MiraPvp extends MiraPluginMaster {
+  
+  private final Random rng;
+  
+  private final Match matchutil; // An instance of the match controller.
+  private final Cache cacheutil; // An instance of the cache.
+  private final RespawnUtility respawnutil; // An instance of the respawning utility.
+  private final EntityUtility entiutil; // An instance of the entity utility.
+  private final ConfigUtility confutil; // An instance of the configuration utility.
+  private final QueryUtility qryutil; // An instance of the database utility.
+  
+  private final ArrayList<UUID> warned; // Keeps track of warning messages for players.
+  private final HashMap<UUID, WarStats> tempStats; // Holds statistics for a player until they log in.
+  
+  private ItemStack HANDBOOK; // Needs to be created in its own function because it's HELLA huge.
+  ItemStack VOTE;
+  ItemStack SKYBLOCK;
+  
+  /**
+   * Creates an instance of this class.
+   * Must be called in onEnable();
+   *
+   * @param plugin Instance of main plugin. Must extend WarPlugin.
+   */
+  public MiraPvp(MiraPvpPlugin plugin) {
+    super(plugin);
+    // Initialize everything.
+    this.cacheutil = new Cache(this);
+    this.matchutil = new Match(this);
+    this.respawnutil = new RespawnUtility(this);
+    this.entiutil = new EntityUtility(this);
+    this.confutil = new ConfigUtility(this);
+    this.qryutil = new QueryUtility(this, plugin.getConfig().getBoolean("database.enabled"));
+    new Guard(this); // Guard does not need a reference so just initialize it.
+    new StatsListener(this); // Stats Listener does not need a reference so just initialize it.
+    
+    warned = new ArrayList<>();
+    tempStats = new HashMap<>();
+    // Task that allows players to receive a warning message every 3 seconds.
+    // Clear warnings.
+    Bukkit.getScheduler().runTaskTimer(plugin, warned::clear, 0L, 60L);
+    createItems();
+  }
+  
+  /**
+   * Returns a running instance of the extended Match manager.
+   *
+   * @return Match manager.
+   */
+  public Match match() {
+    return matchutil;
+  }
+  
+  /**
+   * Returns a running instance of the extended Cache.
+   *
+   * @return Cache.
+   */
+  public Cache cache() {
+    return cacheutil;
+  }
+  
+  /**
+   * Returns a running instance of the respawn utility.
+   *
+   * @return Respawn utility.
+   */
+  public RespawnUtility respawn() {
+    return respawnutil;
+  }
+  
+  /**
+   * Returns a running instance of the entity utility.
+   *
+   * @return Entity utility.
+   */
+  public EntityUtility entity() {
+    return entiutil;
+  }
+  
+  /**
+   * Returns a running instance of the configuration utility.
+   *
+   * @return Configuration utility.
+   */
+  public ConfigUtility conf() {
+    return confutil;
+  }
+  
+  /**
+   * Returns a running instance of the query utility.
+   *
+   * @return Query utility.
+   */
+  public QueryUtility query() {
+    return qryutil;
+  }
+  
+  /**
+   * Temporarily holds onto a player's statistics
+   * without necessarily having a WarPlayerPlus
+   * instance created yet. (pre login)
+   *
+   * @param uuid      UUID associated with the stats.
+   * @param tempStats Actual stats.
+   */
+  void putTempStats(UUID uuid, WarStats tempStats) {
+    this.tempStats.put(uuid, tempStats);
+  }
+  
+  /**
+   * Creates an instance of a WarPlayer for a player.
+   *
+   * @param target The target to base the WarPlayer object on.
+   */
+  public WarPlayer craftWarPlayer(Player target) {
+    WarStats stats = tempStats.getOrDefault(target.getUniqueId(), new WarStats(this, target.getUniqueId())); // Get their stats, or create new ones.
+    tempStats.remove(target.getUniqueId()); // Remove their pre-login storage stats.
+    WarPlayer result = new WarPlayerPlus(target, this, stats); // Create their instance.
+    getWarPlayers().put(target.getUniqueId(), result); // Put it in the key/value set!
+    return result;
+  }
+  
+  /**
+   * Checks if a player can be warned, and then warns them.
+   *
+   * @param whoWasWarned Who was warned. (lol)
+   */
+  public void warn(Player whoWasWarned, String warning) {
+    if (warned.contains(whoWasWarned.getPlayer().getUniqueId())) return;
+    warned.add(whoWasWarned.getPlayer().getUniqueId());
+    whoWasWarned.sendMessage("TIP: " + warning);
+  }
+  
+  /**
+   * Gives a targeted player the spectator kit.
+   * This isn't needed, but it might be later.
+   *
+   * @param wp The target player.
+   * @since 1.0
+   */
+  public void giveSpectatorKit(WarPlayer wp) {
+    wp.getPlayer().getInventory().setHeldItemSlot(4);
+    wp.getPlayer().getInventory().setItem(4, HANDBOOK);
+    wp.getPlayer().getInventory().setItem(0, SKYBLOCK);
+    wp.getPlayer().getInventory().setItem(1, VOTE);
+  }
+  
+  /**
+   * Creates the handbook because the process of
+   * doing so consumes lines like no tomorrow.
+   * All other items too why not.
+   */
+  private void createItems() {
+    HANDBOOK = new ItemStack(Material.WRITTEN_BOOK);
+    BookMeta bookMeta = (BookMeta) HANDBOOK.getItemMeta();
+    bookMeta.setTitle(ChatColor.BOLD + "War: The Basics");
+    bookMeta.setAuthor("War Administration");
+    bookMeta.setGeneration(BookMeta.Generation.TATTERED);
+    
+    List<String> pages = new ArrayList<>();
+    pages.add(ChatColor.translateAlternateColorCodes('&', "&lWar: The Basics\n&0Hey there, player!\n\nBook Contents:\n&ci.&0 Overview\n&9ii.&0 Commands\n&6iii.&0 Players\n&aiv.&0 Rules\n\nIf you're &cnew&0, read through me and then\n       &nHAVE FUN!\n\n&0  »»»"));
+    pages.add(ChatColor.translateAlternateColorCodes('&', "&oPart I. An Overview\n&0Welcome to War!\n\nThis is a &5team-based &0strategy PvP server!\nWork with your &4team mates &0to win matches.\n\nThere's a &agamemode &0tosuit everyone's play style!\n\n\n&0     »»»"));
+    pages.add(ChatColor.translateAlternateColorCodes('&', "&oPart II. Commands\n\nStart Playing!\n&c/join &0- &9/leave\n&0What's up next?\n&4/rotation\n&0Have your say!\n&a/vote &0<gamemode>\nStatistics!\n&6/stats &0+ &7/leaderboard\n\n&0Or, &n/? War\n\n&0        »»»"));
+    pages.add(ChatColor.translateAlternateColorCodes('&', "&oPart III. Players\n&0You'll see these people online!\n\n&oStaff:\n&6@&8Administrator\n&5@&8Moderator\n\n&0&oOther Ranks:\n&a#&8Donator\n&e#&8DonatorPlus\n&4#&8MapCreator\n\n&0           »»»"));
+    pages.add(ChatColor.translateAlternateColorCodes('&', "&oPart IV. Rules\n&0Follow these!\n\n&ci. &0Don't be a dick.\n&9ii. &0Play the game.\n&4iii. &0Don't cheat.\n&6iv. &0Don't combat log.\n&2v. &0Be a good sport.\n&5vi. &0Don't spawncamp.\n&8vii. &0Listen to @Staff\n&7viii. &0Have fun!\n\n\n&0              »»»"));
+    pages.add(ChatColor.translateAlternateColorCodes('&', "&oNow, go get 'em!\n\n&0We encourage players to use &4common sense &0whilst playing. Have a safe, sensible, and &dfun &cWar!\n\n&0- Administration\n\n\n\n\n                  X"));
+    bookMeta.setPages(pages);
+    HANDBOOK.setItemMeta(bookMeta);
+    
+    SKYBLOCK = new ItemStack(Material.EYE_OF_ENDER);
+    ItemMeta sbMeta = SKYBLOCK.getItemMeta();
+    sbMeta.setDisplayName(ChatColor.BOLD + "To: Skyblock");
+    List<String> lore = new ArrayList<>();
+    lore.add(ChatColor.GRAY + "Right click to return");
+    lore.add(ChatColor.GRAY + "to the Skyblock server!");
+    sbMeta.setLore(lore);
+    SKYBLOCK.setItemMeta(sbMeta);
+    
+    VOTE = items().createPotion(PotionEffectType.HEAL, 0, 0, 1);
+    ItemMeta voteMeta = VOTE.getItemMeta();
+    voteMeta.setDisplayName(ChatColor.BOLD + "Vote For Us!");
+    lore.clear();
+    lore.add(ChatColor.GRAY + "Right click to reaveal the");
+    lore.add(ChatColor.GRAY + "voting link. Earn rewards!");
+    voteMeta.setLore(lore);
+    VOTE.setItemMeta(voteMeta);
+  }
+  
+  @Override
+  public @NotNull Cache observe() {
+    return cacheutil;
+  }
 }
diff --git a/src/sbs/mira/pvp/MiraPvpPlugin.java b/src/sbs/mira/pvp/MiraPvpPlugin.java
index ec90190..8e4680f 100644
--- a/src/sbs/mira/pvp/MiraPvpPlugin.java
+++ b/src/sbs/mira/pvp/MiraPvpPlugin.java
@@ -19,9 +19,9 @@ import org.bukkit.entity.Player;
  * Created by Josh on 20/04/2017.
  * @since 1.0
  */
-public class Main extends MiraPlugin {
+public class MiraPvpPlugin extends MiraPlugin {
 
-    private transient Manager supercontroller; // Running instance of Manager.
+    private MiraPvp supercontroller; // Running instance of Manager.
 
     /**
      * Required method by WarPlugin.
@@ -31,7 +31,7 @@ public class Main extends MiraPlugin {
         log("War program has awoken!");
         this.getServer().getMessenger().registerOutgoingPluginChannel(this, "BungeeCord");
         // The Manager handles most of the module initialisations.
-        supercontroller = new Manager(this);
+        supercontroller = new MiraPvp(this);
         register_module(CommandUtility.class); // Register the command class containing the @Commands.
         register_module(StatsCommandUtility.class); // Register statistics modules.
         register_module_commands(); // Finalise the registration of  all the classes we chose.
diff --git a/src/sbs/mira/pvp/WarPlayerPlus.java b/src/sbs/mira/pvp/WarPlayerPlus.java
index 151e9c8..30fb21e 100644
--- a/src/sbs/mira/pvp/WarPlayerPlus.java
+++ b/src/sbs/mira/pvp/WarPlayerPlus.java
@@ -1,8 +1,7 @@
-package au.edu.swin.war;
+package sbs.mira.pvp;
 
-import au.edu.swin.war.framework.WarPlayer;
-import au.edu.swin.war.stats.WarStats;
-import au.edu.swin.war.util.Manager;
+import sbs.mira.pvp.framework.WarPlayer;
+import sbs.mira.pvp.stats.WarStats;
 import org.bukkit.ChatColor;
 import org.bukkit.entity.Player;
 
@@ -24,7 +23,7 @@ public final class WarPlayerPlus extends WarPlayer {
      * @param player  The Spigot instance of the Player's entity.
      * @param manager Instance of the supercontroller.
      */
-    public WarPlayerPlus(Player player, Manager manager, WarStats stats) {
+    public WarPlayerPlus(Player player, MiraPvp manager, WarStats stats) {
         super(player, manager);
         this.stats = stats;
     }
diff --git a/src/sbs/mira/pvp/event/MatchPlayerRespawnEvent.java b/src/sbs/mira/pvp/event/MatchPlayerRespawnEvent.java
index 7bd0386..3807799 100644
--- a/src/sbs/mira/pvp/event/MatchPlayerRespawnEvent.java
+++ b/src/sbs/mira/pvp/event/MatchPlayerRespawnEvent.java
@@ -1,6 +1,6 @@
-package au.edu.swin.war.event;
+package sbs.mira.pvp.event;
 
-import au.edu.swin.war.framework.WarPlayer;
+import sbs.mira.pvp.framework.WarPlayer;
 import org.bukkit.event.Event;
 import org.bukkit.event.HandlerList;
 
diff --git a/src/sbs/mira/pvp/event/PostMatchPlayerRespawnEvent.java b/src/sbs/mira/pvp/event/PostMatchPlayerRespawnEvent.java
index 8ad901a..e50f441 100644
--- a/src/sbs/mira/pvp/event/PostMatchPlayerRespawnEvent.java
+++ b/src/sbs/mira/pvp/event/PostMatchPlayerRespawnEvent.java
@@ -1,8 +1,9 @@
-package au.edu.swin.war.event;
+package sbs.mira.pvp.event;
 
-import au.edu.swin.war.framework.WarPlayer;
+import sbs.mira.pvp.framework.WarPlayer;
 import org.bukkit.event.Event;
 import org.bukkit.event.HandlerList;
+import sbs.mira.pvp.game.util.SpawnArea;
 
 /**
  * Custom event to handle events after a match respawn.
@@ -10,7 +11,7 @@ import org.bukkit.event.HandlerList;
  *
  * @author s101601828 @ Swin.
  * @version 1.0
- * @see au.edu.swin.war.game.util.SpawnArea
+ * @see SpawnArea
  * <p>
  * Created by Josh on 20/04/2017.
  * @since 1.0
diff --git a/src/sbs/mira/pvp/framework/MiraPluginMaster.java b/src/sbs/mira/pvp/framework/MiraPluginMaster.java
index afc6086..86e4e95 100644
--- a/src/sbs/mira/pvp/framework/MiraPluginMaster.java
+++ b/src/sbs/mira/pvp/framework/MiraPluginMaster.java
@@ -1,34 +1,218 @@
 package sbs.mira.pvp.framework;
 
+import net.md_5.bungee.api.chat.TextComponent;
+import org.bukkit.ChatColor;
+import org.bukkit.entity.Player;
 import org.jetbrains.annotations.NotNull;
+import sbs.mira.pvp.framework.util.WarCache;
+import sbs.mira.pvp.framework.util.WarMatch;
 import sbs.mira.pvp.framework.util.modules.ItemUtility;
 import sbs.mira.pvp.framework.util.modules.StringUtility;
+import sbs.mira.pvp.framework.util.modules.WorldUtility;
 import sbs.mira.pvp.util.Cache;
 
+import java.util.HashMap;
+import java.util.Random;
+import java.util.UUID;
+
 /**
  * represents the state of a bukkit server under the influence of mira.
  */
-public interface Mira {
+public abstract class MiraPluginMaster {
+  
+  private final MiraPlugin plugin;
+  private final HashMap<UUID, WarPlayer> players;
+  private final ItemUtility items;
+  private final StringUtility strings;
+  private final WorldUtility world;
+  private final Random rng;
+  
+  public MiraPluginMaster(MiraPlugin plugin) {
+    this.plugin = plugin;
+    this.players = new HashMap<>();
+    this.items = new ItemUtility(this);
+    this.strings = new StringUtility(this);
+    this.world = new WorldUtility(this);
+    this.rng = new Random();
+  }
+  
+  /**
+   * retrieve and prefill a pre-configured message template.
+   *
+   * @param key          message key name.
+   * @param replacements replaces "{0}", "{1}" and so on with the provided.
+   * @throws IllegalArgumentException message key does not exist.
+   */
+  public @NotNull String message(String key, String... replacements) throws IllegalArgumentException {
+    int i = 0;
+    String result = ChatColor.translateAlternateColorCodes('&', conf().getMessage(key));
+    while (result.contains("{" + i + "}")) {
+      result = result.replace("{%d}".formatted(i), replacements[i]);
+      i++;
+    }
+    return result;
+  }
   
+  /**
+   * Returns an instance of WarPlugin so that
+   * crucial JavaPlugin methods can be accessed.
+   *
+   * @return A running instance of the plugin main.
+   */
+  @NotNull
+  public MiraPlugin plugin() {
+    return plugin;
+  }
+  
+  /**
+   * Returns an instance of ItemUtility so that
+   * maps, gamemodes, etc. can quickly access functions
+   * that allow ItemStacks to be manipulated.
+   *
+   * @return A running instance of the item utility.
+   */
   @NotNull
-  MiraPlugin plugin();
+  public ItemUtility items() {
+    return itemutil;
+  }
   
+  /**
+   * Returns an instance of StringUtility so that
+   * maps, gamemodes, etc. can quickly access functions
+   * that allow Strings to be manipulated.
+   *
+   * @return A running instance of the strings utility.
+   */
   @NotNull
-  Cache observe();
+  public StringUtility strings() {
+    return strutil;
+  }
   
+  /**
+   * Returns an instance of WorldUtility so that
+   * maps, gamemodes, etc. can quickly access functions
+   * that allow world files to be manipulated.
+   *
+   * @return A running instance of the world utility.
+   */
   @NotNull
-  ItemUtility items();
+  public WorldUtility world() {
+    return wrldutil;
+  }
   
+  /**
+   * Returns a running instance of the match manager.
+   * This cannot be held in the framework, so you will
+   * need to create your own field and make this function
+   * return the manager.
+   *
+   * @return A running instance of the match manager.
+   * @see WarMatch
+   */
   @NotNull
-  StringUtility strings();
+  public abstract WarMatch match();
   
   /**
-   * retrieve and prefill a pre-configured message template.
+   * Returns a running instance of the cache manager.
+   * This cannot be held in the framework, so you will
+   * need to create your own field and make this function
+   * return the cache.
    *
-   * @param key          message key name.
-   * @param replacements replaces "{0}", "{1}" and so on with the provided.
-   * @throws IllegalArgumentException message key does not exist.
+   * @return A running instance of the cache.
+   * @see WarCache
    */
   @NotNull
-  String message(String key, String... replacements) throws IllegalArgumentException;
+  public abstract WarCache cache();
+  
+  /**
+   * Returns the Key/Value set for all online WarPlayers.
+   * Use this method to conveniently loop through all players.
+   * i.e. for sending a message to everyone online,
+   * i.e. or performing a common action to everyone.
+   *
+   * @return The HashMap defining all players.
+   */
+  @NotNull
+  public HashMap<UUID, WarPlayer> getWarPlayers() {
+    return warPlayers;
+  }
+  
+  /**
+   * Creates an instance of a WarPlayer for a player.
+   * Since the class relies heavily on Spigot methods,
+   * the parameter must be the player entity itself.
+   * <p>
+   * !IMPORTANT! Please make sure this crafts your
+   * extension of WarPlayer, not the abstract class itself!
+   *
+   * @param target The target to base the WarPlayer object on.
+   * @see WarPlayer;
+   */
+  @NotNull
+  public abstract WarPlayer craftWarPlayer(Player target);
+  
+  /**
+   * When called, this should clear a player's inventory
+   * and if applicable, give the player a spectator kit.
+   *
+   * @param wp The target player.
+   */
+  @NotNull
+  public abstract void giveSpectatorKit(WarPlayer wp);
+  
+  /**
+   * Checks if a player can be warned, and then warns them.
+   *
+   * @param whoWasWarned Who was warned. (lol)
+   */
+  @NotNull
+  public abstract void warn(Player whoWasWarned, String warning);
+  
+  /**
+   * Removes the instance of a WarPlayer.
+   * This should always be called on the
+   * targeted player's disconnect from the server.
+   *
+   * @param target The WarPlayer object to destroy in the HashMap.
+   */
+  @NotNull
+  public void destroyWarPlayer(UUID target) {
+    warPlayers.remove(target);
+  }
+  
+  /**
+   * Please read the below documentation, since this
+   * method simply calls the function below this one.
+   * method simply calls the function below this one.
+   *
+   * @param target The target to query.
+   * @return The target's WarPlayer instance.
+   */
+  @NotNull
+  public WarPlayer getWarPlayer(Player target) {
+    if (target == null) return null;
+    return getWarPlayer(target.getUniqueId());
+  }
+  
+  /**
+   * Returns an instance of a registered WarPlayer, if any.
+   * Please remember to cast whatever you return to your own custom WarPlayer extension!
+   *
+   * @param target The target to query.
+   * @return The target's WarPlayer instance.
+   */
+  public WarPlayer getWarPlayer(UUID target) {
+    return warPlayers.get(target);
+  }
+  
+  
+  /**
+   * Sends a TextComponent message to everyone online.
+   *
+   * @param comp Message to send.
+   */
+  public void broadcastSpigotMessage(TextComponent comp) {
+    for (WarPlayer online : getWarPlayers().values())
+      online.getPlayer().spigot().sendMessage(comp);
+  }
 }
diff --git a/src/sbs/mira/pvp/game/Gamemode.java b/src/sbs/mira/pvp/game/Gamemode.java
index f56454c..7194820 100644
--- a/src/sbs/mira/pvp/game/Gamemode.java
+++ b/src/sbs/mira/pvp/game/Gamemode.java
@@ -1,14 +1,15 @@
-package au.edu.swin.war.game;
-
-import au.edu.swin.war.event.MatchPlayerRespawnEvent;
-import au.edu.swin.war.event.PostMatchPlayerRespawnEvent;
-import au.edu.swin.war.framework.WarPlayer;
-import au.edu.swin.war.framework.event.MatchPlayerDeathEvent;
-import au.edu.swin.war.framework.game.WarMode;
-import au.edu.swin.war.framework.game.WarTeam;
-import au.edu.swin.war.framework.util.WarManager;
+package sbs.mira.pvp.game;
+
+import sbs.mira.pvp.event.MatchPlayerRespawnEvent;
+import sbs.mira.pvp.event.PostMatchPlayerRespawnEvent;
+import sbs.mira.pvp.framework.WarPlayer;
+import sbs.mira.pvp.framework.event.MatchPlayerDeathEvent;
+import sbs.mira.pvp.framework.game.WarMode;
+import sbs.mira.pvp.framework.game.WarTeam;
+import sbs.mira.pvp.framework.util.Mira;
 import au.edu.swin.war.game.modes.*;
-import au.edu.swin.war.util.Manager;
+import sbs.mira.pvp.game.modes.*;
+import sbs.mira.pvp.MiraPvp;
 import net.md_5.bungee.api.chat.ClickEvent;
 import net.md_5.bungee.api.chat.ComponentBuilder;
 import net.md_5.bungee.api.chat.HoverEvent;
@@ -87,7 +88,7 @@ public abstract class Gamemode extends WarMode {
      */
     @SuppressWarnings("unchecked")
     public void resetCommon() {
-        if (((Manager) main).conf().WEBSTATS_ENABLED) {
+        if (((MiraPvp) main).conf().WEBSTATS_ENABLED) {
             JSONObject stats = new JSONObject();
             if (getTimeElapsed() == 0)
                 setTimeElapsed(1); // Elapse at least one second to prevent a divison by zero error.
@@ -103,7 +104,7 @@ public abstract class Gamemode extends WarMode {
                 totalDeaths += death;
 
             // Global Match Information
-            stats.put("matchid", ((Manager) main).conf().WEBSTATS_POS + 1);
+            stats.put("matchid", ((MiraPvp) main).conf().WEBSTATS_POS + 1);
             stats.put("mapname", map().getMapName());
             stats.put("gamemode", getFullName());
             stats.put("duration", main.strings().getDigitalTime(getTimeElapsed()));
@@ -122,7 +123,7 @@ public abstract class Gamemode extends WarMode {
                 return;
             }
 
-            ((Manager) main).conf().incrementPosition(); // Increment to the next match ID.
+            ((MiraPvp) main).conf().incrementPosition(); // Increment to the next match ID.
 
             // Team Information
             JSONObject teams = new JSONObject(); // JSON Object to store teams.
@@ -161,7 +162,7 @@ public abstract class Gamemode extends WarMode {
             // Run the HTTP request asynchronous to prevent lag..
             main.plugin().getServer().getScheduler().runTaskAsynchronously(main.plugin(), () -> {
                 try {
-                    URL url = new URL(((Manager) main).conf().WEBSTATS_ACTION);
+                    URL url = new URL(((MiraPvp) main).conf().WEBSTATS_ACTION);
                     URLConnection con = url.openConnection();
                     HttpURLConnection http = (HttpURLConnection) con;
                     http.setRequestMethod("POST");
@@ -169,7 +170,7 @@ public abstract class Gamemode extends WarMode {
 
                     Map<String, String> arguments = new HashMap<>();
                     // Our HTTP POST arguments.
-                    arguments.put("secret", ((Manager) main).conf().WEBSTATS_SECRET);
+                    arguments.put("secret", ((MiraPvp) main).conf().WEBSTATS_SECRET);
                     arguments.put("stats", stats.toJSONString());
 
                     // Encodes our request.
@@ -190,7 +191,7 @@ public abstract class Gamemode extends WarMode {
                     }
                     // Log the response to the request to ensure it was successful.
                     main.plugin().log("Stats HTTP POST request successful: " + IOUtils.toString(http.getInputStream(), StandardCharsets.UTF_8.name()));
-                    Bukkit.broadcastMessage("Full Match statistics recorded @ " + ChatColor.UNDERLINE + "https://rpg.solar/match/" + ((Manager) main).conf().WEBSTATS_POS);
+                    Bukkit.broadcastMessage("Full Match statistics recorded @ " + ChatColor.UNDERLINE + "https://rpg.solar/match/" + ((MiraPvp) main).conf().WEBSTATS_POS);
                 } catch (IOException e) {
                     // If anything goes wrong, just raw print the stats.
                     e.printStackTrace();
@@ -233,7 +234,7 @@ public abstract class Gamemode extends WarMode {
         inc(deaths, dead.getPlayer().getUniqueId()); // Increment their deaths this match.
         WarPlayer killer = main.getWarPlayer(dead.getPlayer().getKiller()); // Get the player who killed the player.
 
-        ((Manager) main).respawn().onDeath(main.getWarPlayer(dead.getPlayer().getUniqueId()));
+        ((MiraPvp) main).respawn().onDeath(main.getWarPlayer(dead.getPlayer().getUniqueId()));
         dead.getCurrentTeam().addDeath();
         // Handle respawning for this player.
 
@@ -404,7 +405,7 @@ public abstract class Gamemode extends WarMode {
          * @param array The array of modes to format.
          * @return The formatted string.
          */
-        public static TextComponent format(Mode[] array, WarManager main) {
+        public static TextComponent format(Mode[] array, Mira main) {
             if (array.length == 0) return new TextComponent("None");
             TextComponent result = new TextComponent();
             if (array.length == 1) return new TextComponent(array[0].getDescriptionComponent(main, true));
@@ -479,7 +480,7 @@ public abstract class Gamemode extends WarMode {
          * @param withVoteClick Enable click this to vote?
          * @return Resulting chat component.
          */
-        public TextComponent getDescriptionComponent(WarManager main, boolean withVoteClick) {
+        public TextComponent getDescriptionComponent(Mira main, boolean withVoteClick) {
             TextComponent msg = new TextComponent(ChatColor.GREEN + "[" + shortName + "]");
             WarMode assoc = main.cache().getGamemode(getFullName());
             msg.setHoverEvent(new HoverEvent(HoverEvent.Action.SHOW_TEXT,
diff --git a/src/sbs/mira/pvp/game/Map.java b/src/sbs/mira/pvp/game/Map.java
index a11fcff..2ebcecd 100644
--- a/src/sbs/mira/pvp/game/Map.java
+++ b/src/sbs/mira/pvp/game/Map.java
@@ -1,9 +1,9 @@
-package au.edu.swin.war.game;
+package sbs.mira.pvp.game;
 
-import au.edu.swin.war.framework.game.WarMap;
-import au.edu.swin.war.framework.stored.Activatable;
-import au.edu.swin.war.framework.stored.SerializedLocation;
-import au.edu.swin.war.util.Match;
+import sbs.mira.pvp.framework.game.WarMap;
+import sbs.mira.pvp.framework.stored.Activatable;
+import sbs.mira.pvp.framework.stored.SerializedLocation;
+import sbs.mira.pvp.util.Match;
 import org.bukkit.ChatColor;
 import org.bukkit.Location;
 import org.bukkit.Material;
diff --git a/src/sbs/mira/pvp/game/modes/CTF.java b/src/sbs/mira/pvp/game/modes/CTF.java
index a6ab2d8..d66ca4d 100644
--- a/src/sbs/mira/pvp/game/modes/CTF.java
+++ b/src/sbs/mira/pvp/game/modes/CTF.java
@@ -1,12 +1,12 @@
-package au.edu.swin.war.game.modes;
-
-import au.edu.swin.war.framework.WarPlayer;
-import au.edu.swin.war.framework.game.WarTeam;
-import au.edu.swin.war.framework.stored.SerializedLocation;
-import au.edu.swin.war.framework.util.WarManager;
-import au.edu.swin.war.game.Gamemode;
-import au.edu.swin.war.util.Manager;
-import au.edu.swin.war.util.WoolColor;
+package sbs.mira.pvp.game.modes;
+
+import sbs.mira.pvp.framework.WarPlayer;
+import sbs.mira.pvp.framework.game.WarTeam;
+import sbs.mira.pvp.framework.stored.SerializedLocation;
+import sbs.mira.pvp.framework.util.Mira;
+import sbs.mira.pvp.game.Gamemode;
+import sbs.mira.pvp.MiraPvp;
+import sbs.mira.pvp.util.WoolColor;
 import org.bukkit.*;
 import org.bukkit.block.Block;
 import org.bukkit.entity.Player;
@@ -30,7 +30,7 @@ import java.util.Iterator;
  *
  * @author s101601828 @ Swin.
  * @version 1.0
- * @see WarManager
+ * @see Mira
  * <p>
  * Created by Josh on 24/04/2017.
  * @since 1.0
@@ -155,9 +155,9 @@ public class CTF extends Gamemode {
     private void doFireworks() {
         for (CTFInfo inf : info.values())
             if (inf.getHolder() == null) // Spawn at flag.
-                ((Manager) main).entity().spawnFirework(inf.getFlag().clone().add(0.5, 1, 0.5), inf.getTeam().getTeamColor());
+                ((MiraPvp) main).entity().spawnFirework(inf.getFlag().clone().add(0.5, 1, 0.5), inf.getTeam().getTeamColor());
             else // Spawn at holder.
-                ((Manager) main).entity().spawnFirework(Bukkit.getPlayer(inf.getHolder()).getLocation(), inf.getTeam().getTeamColor());
+                ((MiraPvp) main).entity().spawnFirework(Bukkit.getPlayer(inf.getHolder()).getLocation(), inf.getTeam().getTeamColor());
     }
 
     /**
diff --git a/src/sbs/mira/pvp/game/modes/DDM.java b/src/sbs/mira/pvp/game/modes/DDM.java
index eea6c4d..ec8f394 100644
--- a/src/sbs/mira/pvp/game/modes/DDM.java
+++ b/src/sbs/mira/pvp/game/modes/DDM.java
@@ -1,10 +1,10 @@
-package au.edu.swin.war.game.modes;
+package sbs.mira.pvp.game.modes;
 
-import au.edu.swin.war.framework.WarPlayer;
-import au.edu.swin.war.framework.game.WarTeam;
-import au.edu.swin.war.framework.stored.Activatable;
-import au.edu.swin.war.framework.util.WarManager;
-import au.edu.swin.war.game.Gamemode;
+import sbs.mira.pvp.framework.WarPlayer;
+import sbs.mira.pvp.framework.game.WarTeam;
+import sbs.mira.pvp.framework.stored.Activatable;
+import sbs.mira.pvp.framework.util.Mira;
+import sbs.mira.pvp.game.Gamemode;
 import org.bukkit.Bukkit;
 import org.bukkit.GameMode;
 import org.bukkit.Location;
@@ -30,7 +30,7 @@ import java.util.Random;
  *
  * @author s101601828 @ Swin.
  * @version 1.0
- * @see WarManager
+ * @see Mira
  * <p>
  * Created by Josh on 26/04/2017.
  * @since 1.0
@@ -167,9 +167,9 @@ public class DDM extends Gamemode {
         final int y2;
         final int z2;
         final String belongsTo;
-        final WarManager main;
+        final Mira main;
 
-        public Territory(int x1, int y1, int z1, int x2, int y2, int z2, WarTeam belongsTo, WarManager main) {
+        public Territory(int x1, int y1, int z1, int x2, int y2, int z2, WarTeam belongsTo, Mira main) {
             // Defines the bottom-left and top-right regions of this cuboid.
             this.x1 = Math.min(x1, x2);
             this.y1 = Math.min(y1, y2);
diff --git a/src/sbs/mira/pvp/game/modes/DTM.java b/src/sbs/mira/pvp/game/modes/DTM.java
index 3da0dc5..318b18e 100644
--- a/src/sbs/mira/pvp/game/modes/DTM.java
+++ b/src/sbs/mira/pvp/game/modes/DTM.java
@@ -1,10 +1,10 @@
-package au.edu.swin.war.game.modes;
+package sbs.mira.pvp.game.modes;
 
-import au.edu.swin.war.framework.WarPlayer;
-import au.edu.swin.war.framework.game.WarTeam;
-import au.edu.swin.war.framework.stored.Activatable;
-import au.edu.swin.war.framework.util.WarManager;
-import au.edu.swin.war.game.Gamemode;
+import sbs.mira.pvp.framework.WarPlayer;
+import sbs.mira.pvp.framework.game.WarTeam;
+import sbs.mira.pvp.framework.stored.Activatable;
+import sbs.mira.pvp.framework.util.Mira;
+import sbs.mira.pvp.game.Gamemode;
 import org.bukkit.Bukkit;
 import org.bukkit.Location;
 import org.bukkit.Material;
@@ -30,7 +30,7 @@ import java.util.*;
  *
  * @author s101601828 @ Swin.
  * @version 1.0
- * @see WarManager
+ * @see Mira
  * <p>
  * Created by Josh on 26/04/2017.
  * @since 1.0
@@ -227,7 +227,7 @@ public class DTM extends Gamemode {
         final WarTeam owner; // What team owns this monument?
         final List<Block> region = new ArrayList<>(); // The blocks associated with this monument.
         final HashMap<UUID, Integer> footprint; // Track who's broken what amount of this monument.
-        final WarManager main; // A running instance of the WarManager class.
+        final Mira main; // A running instance of the WarManager class.
         final boolean isVisible; // Is this monument visible if DTM is not playing?
         int origSize; // The original size of the monument.
         int blocksBroken; // The amount of blocks broken off the monument.
@@ -236,7 +236,7 @@ public class DTM extends Gamemode {
         boolean weak = false; // Is this monument weak?
         boolean active = false; // Should we do anything?
 
-        public Monument(int x1, int y1, int z1, int x2, int y2, int z2, WarTeam owner, WarManager main, boolean isVisible, Material... composure) {
+        public Monument(int x1, int y1, int z1, int x2, int y2, int z2, WarTeam owner, Mira main, boolean isVisible, Material... composure) {
             this.x1 = Math.min(x1, x2);
             this.y1 = Math.min(y1, y2);
             this.z1 = Math.min(z1, z2);
diff --git a/src/sbs/mira/pvp/game/modes/FFA.java b/src/sbs/mira/pvp/game/modes/FFA.java
index 96bf7b7..b38b128 100644
--- a/src/sbs/mira/pvp/game/modes/FFA.java
+++ b/src/sbs/mira/pvp/game/modes/FFA.java
@@ -1,9 +1,9 @@
-package au.edu.swin.war.game.modes;
+package sbs.mira.pvp.game.modes;
 
-import au.edu.swin.war.framework.WarPlayer;
-import au.edu.swin.war.framework.game.WarTeam;
-import au.edu.swin.war.framework.util.WarManager;
-import au.edu.swin.war.game.Gamemode;
+import sbs.mira.pvp.framework.WarPlayer;
+import sbs.mira.pvp.framework.game.WarTeam;
+import sbs.mira.pvp.framework.util.Mira;
+import sbs.mira.pvp.game.Gamemode;
 import org.bukkit.Bukkit;
 import org.bukkit.ChatColor;
 import org.bukkit.entity.Player;
@@ -23,7 +23,7 @@ import java.util.UUID;
  *
  * @author s101601828 @ Swin.
  * @version 1.0
- * @see WarManager
+ * @see Mira
  * <p>
  * Created by Josh on 26/04/2017.
  * @since 1.0
diff --git a/src/sbs/mira/pvp/game/modes/KoTH.java b/src/sbs/mira/pvp/game/modes/KoTH.java
index da38218..ba92256 100644
--- a/src/sbs/mira/pvp/game/modes/KoTH.java
+++ b/src/sbs/mira/pvp/game/modes/KoTH.java
@@ -1,12 +1,12 @@
-package au.edu.swin.war.game.modes;
-
-import au.edu.swin.war.framework.WarPlayer;
-import au.edu.swin.war.framework.game.WarTeam;
-import au.edu.swin.war.framework.stored.SerializedLocation;
-import au.edu.swin.war.framework.util.WarManager;
-import au.edu.swin.war.game.Gamemode;
-import au.edu.swin.war.util.Manager;
-import au.edu.swin.war.util.WoolColor;
+package sbs.mira.pvp.game.modes;
+
+import sbs.mira.pvp.framework.WarPlayer;
+import sbs.mira.pvp.framework.game.WarTeam;
+import sbs.mira.pvp.framework.stored.SerializedLocation;
+import sbs.mira.pvp.framework.util.Mira;
+import sbs.mira.pvp.game.Gamemode;
+import sbs.mira.pvp.MiraPvp;
+import sbs.mira.pvp.util.WoolColor;
 import org.bukkit.*;
 import org.bukkit.entity.Player;
 import org.bukkit.event.EventHandler;
@@ -28,7 +28,7 @@ import java.util.Iterator;
  *
  * @author s101601828 @ Swin.
  * @version 1.0
- * @see WarManager
+ * @see Mira
  * <p>
  * Created by Josh on 23/04/2017.
  * @since 1.0
@@ -140,9 +140,9 @@ public class KoTH extends Gamemode {
      */
     private void doFireworks() {
         if (holder == null) // Spawn white.
-            ((Manager) main).entity().spawnFirework(flag.clone().add(0.5, 1, 0.5), ChatColor.WHITE);
+            ((MiraPvp) main).entity().spawnFirework(flag.clone().add(0.5, 1, 0.5), ChatColor.WHITE);
         else // Spawn team-colored.
-            ((Manager) main).entity().spawnFirework(flag.clone().add(0.5, 1, 0.5), holder.getTeamColor());
+            ((MiraPvp) main).entity().spawnFirework(flag.clone().add(0.5, 1, 0.5), holder.getTeamColor());
     }
 
     public void updateScoreboard() {
diff --git a/src/sbs/mira/pvp/game/modes/LMS.java b/src/sbs/mira/pvp/game/modes/LMS.java
index dfc3a58..2491453 100644
--- a/src/sbs/mira/pvp/game/modes/LMS.java
+++ b/src/sbs/mira/pvp/game/modes/LMS.java
@@ -1,9 +1,9 @@
-package au.edu.swin.war.game.modes;
+package sbs.mira.pvp.game.modes;
 
-import au.edu.swin.war.framework.WarPlayer;
-import au.edu.swin.war.framework.game.WarTeam;
-import au.edu.swin.war.framework.util.WarManager;
-import au.edu.swin.war.game.Gamemode;
+import sbs.mira.pvp.framework.WarPlayer;
+import sbs.mira.pvp.framework.game.WarTeam;
+import sbs.mira.pvp.framework.util.Mira;
+import sbs.mira.pvp.game.Gamemode;
 import org.bukkit.Bukkit;
 import org.bukkit.entity.Player;
 import org.bukkit.event.EventHandler;
@@ -23,7 +23,7 @@ import java.util.UUID;
  *
  * @author s101601828 @ Swin.
  * @version 1.0
- * @see WarManager
+ * @see Mira
  * <p>
  * Created by Josh on 26/04/2017.
  * @since 1.0
diff --git a/src/sbs/mira/pvp/game/modes/LP.java b/src/sbs/mira/pvp/game/modes/LP.java
index 9241841..368e926 100644
--- a/src/sbs/mira/pvp/game/modes/LP.java
+++ b/src/sbs/mira/pvp/game/modes/LP.java
@@ -1,9 +1,9 @@
-package au.edu.swin.war.game.modes;
+package sbs.mira.pvp.game.modes;
 
-import au.edu.swin.war.framework.WarPlayer;
-import au.edu.swin.war.framework.game.WarTeam;
-import au.edu.swin.war.framework.util.WarManager;
-import au.edu.swin.war.game.Gamemode;
+import sbs.mira.pvp.framework.WarPlayer;
+import sbs.mira.pvp.framework.game.WarTeam;
+import sbs.mira.pvp.framework.util.Mira;
+import sbs.mira.pvp.game.Gamemode;
 import org.bukkit.Bukkit;
 import org.bukkit.entity.Player;
 import org.bukkit.scoreboard.DisplaySlot;
@@ -21,7 +21,7 @@ import java.util.Iterator;
  *
  * @author s101601828 @ Swin.
  * @version 1.0
- * @see WarManager
+ * @see Mira
  * <p>
  * Created by Josh on 21/04/2017.
  * @since 1.0
diff --git a/src/sbs/mira/pvp/game/modes/LTS.java b/src/sbs/mira/pvp/game/modes/LTS.java
index fce3bf2..8e5bad5 100644
--- a/src/sbs/mira/pvp/game/modes/LTS.java
+++ b/src/sbs/mira/pvp/game/modes/LTS.java
@@ -1,9 +1,9 @@
-package au.edu.swin.war.game.modes;
+package sbs.mira.pvp.game.modes;
 
-import au.edu.swin.war.framework.WarPlayer;
-import au.edu.swin.war.framework.game.WarTeam;
-import au.edu.swin.war.framework.util.WarManager;
-import au.edu.swin.war.game.Gamemode;
+import sbs.mira.pvp.framework.WarPlayer;
+import sbs.mira.pvp.framework.game.WarTeam;
+import sbs.mira.pvp.framework.util.Mira;
+import sbs.mira.pvp.game.Gamemode;
 import org.bukkit.Bukkit;
 import org.bukkit.entity.Player;
 import org.bukkit.event.EventHandler;
@@ -24,7 +24,7 @@ import java.util.UUID;
  *
  * @author s101601828 @ Swin.
  * @version 1.0
- * @see WarManager
+ * @see Mira
  * <p>
  * Created by Josh on 26/04/2017.
  * @since 1.0
diff --git a/src/sbs/mira/pvp/game/modes/TDM.java b/src/sbs/mira/pvp/game/modes/TDM.java
index c10996e..01bdd74 100644
--- a/src/sbs/mira/pvp/game/modes/TDM.java
+++ b/src/sbs/mira/pvp/game/modes/TDM.java
@@ -1,9 +1,9 @@
-package au.edu.swin.war.game.modes;
+package sbs.mira.pvp.game.modes;
 
-import au.edu.swin.war.framework.WarPlayer;
-import au.edu.swin.war.framework.game.WarTeam;
-import au.edu.swin.war.framework.util.WarManager;
-import au.edu.swin.war.game.Gamemode;
+import sbs.mira.pvp.framework.WarPlayer;
+import sbs.mira.pvp.framework.game.WarTeam;
+import sbs.mira.pvp.framework.util.Mira;
+import sbs.mira.pvp.game.Gamemode;
 import org.bukkit.Bukkit;
 import org.bukkit.entity.Player;
 import org.bukkit.scoreboard.DisplaySlot;
@@ -21,7 +21,7 @@ import java.util.Iterator;
  *
  * @author s101601828 @ Swin.
  * @version 1.0
- * @see WarManager
+ * @see Mira
  * <p>
  * Created by Josh on 21/04/2017.
  * @since 1.0
diff --git a/src/sbs/mira/pvp/game/util/AntiTeamGrief.java b/src/sbs/mira/pvp/game/util/AntiTeamGrief.java
index 6f55105..72c7c12 100644
--- a/src/sbs/mira/pvp/game/util/AntiTeamGrief.java
+++ b/src/sbs/mira/pvp/game/util/AntiTeamGrief.java
@@ -1,8 +1,8 @@
-package au.edu.swin.war.game.util;
+package sbs.mira.pvp.game.util;
 
-import au.edu.swin.war.framework.stored.Activatable;
-import au.edu.swin.war.framework.util.WarManager;
-import au.edu.swin.war.framework.util.WarModule;
+import sbs.mira.pvp.framework.stored.Activatable;
+import sbs.mira.pvp.framework.util.Mira;
+import sbs.mira.pvp.framework.util.WarModule;
 import org.bukkit.ChatColor;
 import org.bukkit.Location;
 import org.bukkit.Material;
@@ -39,7 +39,7 @@ public class AntiTeamGrief extends WarModule implements Activatable, Listener {
      * @param z2       Top right Z.
      * @param penalize Penalize whoever tries to team-grief.
      */
-    public AntiTeamGrief(WarManager main, ChatColor teamColor, int x1, int z1, int x2, int z2, boolean penalize) {
+    public AntiTeamGrief(Mira main, ChatColor teamColor, int x1, int z1, int x2, int z2, boolean penalize) {
         super(main);
         this.teamColor = teamColor;
         this.x1 = Math.min(x1, x2);
diff --git a/src/sbs/mira/pvp/game/util/RadialSpawnPoint.java b/src/sbs/mira/pvp/game/util/RadialSpawnPoint.java
index 73039e5..553fd8a 100644
--- a/src/sbs/mira/pvp/game/util/RadialSpawnPoint.java
+++ b/src/sbs/mira/pvp/game/util/RadialSpawnPoint.java
@@ -1,6 +1,6 @@
-package au.edu.swin.war.game.util;
+package sbs.mira.pvp.game.util;
 
-import au.edu.swin.war.framework.stored.SerializedLocation;
+import sbs.mira.pvp.framework.stored.SerializedLocation;
 import org.bukkit.Location;
 import org.bukkit.World;
 
diff --git a/src/sbs/mira/pvp/game/util/SpawnArea.java b/src/sbs/mira/pvp/game/util/SpawnArea.java
index 97e03e4..aa1a23d 100644
--- a/src/sbs/mira/pvp/game/util/SpawnArea.java
+++ b/src/sbs/mira/pvp/game/util/SpawnArea.java
@@ -1,11 +1,11 @@
-package au.edu.swin.war.game.util;
-
-import au.edu.swin.war.event.PostMatchPlayerRespawnEvent;
-import au.edu.swin.war.framework.event.MatchPlayerJoinEvent;
-import au.edu.swin.war.framework.event.MatchPlayerLeaveEvent;
-import au.edu.swin.war.framework.stored.Activatable;
-import au.edu.swin.war.framework.util.WarManager;
-import au.edu.swin.war.framework.util.WarModule;
+package sbs.mira.pvp.game.util;
+
+import sbs.mira.pvp.event.PostMatchPlayerRespawnEvent;
+import sbs.mira.pvp.framework.event.MatchPlayerJoinEvent;
+import sbs.mira.pvp.framework.event.MatchPlayerLeaveEvent;
+import sbs.mira.pvp.framework.stored.Activatable;
+import sbs.mira.pvp.framework.util.Mira;
+import sbs.mira.pvp.framework.util.WarModule;
 import org.bukkit.GameMode;
 import org.bukkit.Location;
 import org.bukkit.block.Block;
@@ -61,7 +61,7 @@ public class SpawnArea extends WarModule implements Activatable, Listener {
      * @param allowArrowsWhilstProtected Allows protected players to shoot arrows.
      * @param allowReEntry               Allows players to (re)enter this area.
      */
-    public SpawnArea(WarManager main, int x1, int z1, int x2, int z2, boolean allowArrowsWhilstProtected, boolean allowReEntry) {
+    public SpawnArea(Mira main, int x1, int z1, int x2, int z2, boolean allowArrowsWhilstProtected, boolean allowReEntry) {
         super(main);
         this.x1 = Math.min(x1, x2);
         this.z1 = Math.min(z1, z2);
diff --git a/src/sbs/mira/pvp/maps/BattleRoyale.java b/src/sbs/mira/pvp/maps/BattleRoyale.java
index c707757..c32eea1 100644
--- a/src/sbs/mira/pvp/maps/BattleRoyale.java
+++ b/src/sbs/mira/pvp/maps/BattleRoyale.java
@@ -1,12 +1,12 @@
-package au.edu.swin.war.maps;
-
-import au.edu.swin.war.framework.WarPlayer;
-import au.edu.swin.war.framework.game.WarTeam;
-import au.edu.swin.war.framework.stored.SerializedLocation;
-import au.edu.swin.war.game.Gamemode;
-import au.edu.swin.war.game.Map;
-import au.edu.swin.war.game.util.RadialSpawnPoint;
-import au.edu.swin.war.game.util.SpawnArea;
+package sbs.mira.pvp.maps;
+
+import sbs.mira.pvp.framework.WarPlayer;
+import sbs.mira.pvp.framework.game.WarTeam;
+import sbs.mira.pvp.framework.stored.SerializedLocation;
+import sbs.mira.pvp.game.Gamemode;
+import sbs.mira.pvp.game.Map;
+import sbs.mira.pvp.game.util.RadialSpawnPoint;
+import sbs.mira.pvp.game.util.SpawnArea;
 import net.minecraft.server.v1_12_R1.EntityLiving;
 import net.minecraft.server.v1_12_R1.EntityTNTPrimed;
 import org.bukkit.ChatColor;
diff --git a/src/sbs/mira/pvp/maps/Battlement.java b/src/sbs/mira/pvp/maps/Battlement.java
index 5e7701b..80e78b5 100644
--- a/src/sbs/mira/pvp/maps/Battlement.java
+++ b/src/sbs/mira/pvp/maps/Battlement.java
@@ -1,11 +1,11 @@
-package au.edu.swin.war.maps;
+package sbs.mira.pvp.maps;
 
-import au.edu.swin.war.framework.WarPlayer;
-import au.edu.swin.war.framework.game.WarTeam;
-import au.edu.swin.war.framework.stored.SerializedLocation;
-import au.edu.swin.war.game.Gamemode;
-import au.edu.swin.war.game.Map;
-import au.edu.swin.war.game.util.RadialSpawnPoint;
+import sbs.mira.pvp.framework.WarPlayer;
+import sbs.mira.pvp.framework.game.WarTeam;
+import sbs.mira.pvp.framework.stored.SerializedLocation;
+import sbs.mira.pvp.game.Gamemode;
+import sbs.mira.pvp.game.Map;
+import sbs.mira.pvp.game.util.RadialSpawnPoint;
 import org.bukkit.ChatColor;
 import org.bukkit.Material;
 import org.bukkit.inventory.ItemStack;
diff --git a/src/sbs/mira/pvp/maps/ClashOfClay.java b/src/sbs/mira/pvp/maps/ClashOfClay.java
index 6c434b5..4dcf9be 100644
--- a/src/sbs/mira/pvp/maps/ClashOfClay.java
+++ b/src/sbs/mira/pvp/maps/ClashOfClay.java
@@ -1,11 +1,11 @@
-package au.edu.swin.war.maps;
+package sbs.mira.pvp.maps;
 
-import au.edu.swin.war.framework.WarPlayer;
-import au.edu.swin.war.framework.game.WarTeam;
-import au.edu.swin.war.framework.stored.SerializedLocation;
-import au.edu.swin.war.game.Gamemode;
-import au.edu.swin.war.game.Map;
-import au.edu.swin.war.game.util.SpawnArea;
+import sbs.mira.pvp.framework.WarPlayer;
+import sbs.mira.pvp.framework.game.WarTeam;
+import sbs.mira.pvp.framework.stored.SerializedLocation;
+import sbs.mira.pvp.game.Gamemode;
+import sbs.mira.pvp.game.Map;
+import sbs.mira.pvp.game.util.SpawnArea;
 import org.bukkit.ChatColor;
 import org.bukkit.Material;
 import org.bukkit.inventory.ItemStack;
diff --git a/src/sbs/mira/pvp/maps/ConvenienceWars.java b/src/sbs/mira/pvp/maps/ConvenienceWars.java
index 8156251..0429fc5 100644
--- a/src/sbs/mira/pvp/maps/ConvenienceWars.java
+++ b/src/sbs/mira/pvp/maps/ConvenienceWars.java
@@ -1,11 +1,11 @@
-package au.edu.swin.war.maps;
+package sbs.mira.pvp.maps;
 
-import au.edu.swin.war.framework.WarPlayer;
-import au.edu.swin.war.framework.game.WarTeam;
-import au.edu.swin.war.framework.stored.SerializedLocation;
-import au.edu.swin.war.game.Gamemode;
-import au.edu.swin.war.game.Map;
-import au.edu.swin.war.game.modes.DDM;
+import sbs.mira.pvp.framework.WarPlayer;
+import sbs.mira.pvp.framework.game.WarTeam;
+import sbs.mira.pvp.framework.stored.SerializedLocation;
+import sbs.mira.pvp.game.Gamemode;
+import sbs.mira.pvp.game.Map;
+import sbs.mira.pvp.game.modes.DDM;
 import org.bukkit.ChatColor;
 import org.bukkit.Material;
 import org.bukkit.entity.Player;
diff --git a/src/sbs/mira/pvp/maps/ExoticPastures.java b/src/sbs/mira/pvp/maps/ExoticPastures.java
index cb58d8f..557dca6 100644
--- a/src/sbs/mira/pvp/maps/ExoticPastures.java
+++ b/src/sbs/mira/pvp/maps/ExoticPastures.java
@@ -1,12 +1,12 @@
-package au.edu.swin.war.maps;
-
-import au.edu.swin.war.framework.WarPlayer;
-import au.edu.swin.war.framework.game.WarTeam;
-import au.edu.swin.war.framework.stored.SerializedLocation;
-import au.edu.swin.war.game.Gamemode;
-import au.edu.swin.war.game.Map;
-import au.edu.swin.war.game.modes.DTM;
-import au.edu.swin.war.game.util.SpawnArea;
+package sbs.mira.pvp.maps;
+
+import sbs.mira.pvp.framework.WarPlayer;
+import sbs.mira.pvp.framework.game.WarTeam;
+import sbs.mira.pvp.framework.stored.SerializedLocation;
+import sbs.mira.pvp.game.Gamemode;
+import sbs.mira.pvp.game.Map;
+import sbs.mira.pvp.game.modes.DTM;
+import sbs.mira.pvp.game.util.SpawnArea;
 import org.bukkit.ChatColor;
 import org.bukkit.Effect;
 import org.bukkit.Material;
diff --git a/src/sbs/mira/pvp/maps/FairwickVillage.java b/src/sbs/mira/pvp/maps/FairwickVillage.java
index 3395484..39b3f38 100644
--- a/src/sbs/mira/pvp/maps/FairwickVillage.java
+++ b/src/sbs/mira/pvp/maps/FairwickVillage.java
@@ -1,11 +1,10 @@
-package au.edu.swin.war.maps;
+package sbs.mira.pvp.maps;
 
-import au.edu.swin.war.framework.WarPlayer;
-import au.edu.swin.war.framework.game.WarTeam;
-import au.edu.swin.war.framework.stored.SerializedLocation;
-import au.edu.swin.war.game.Gamemode;
-import au.edu.swin.war.game.Map;
-import org.bukkit.Bukkit;
+import sbs.mira.pvp.framework.WarPlayer;
+import sbs.mira.pvp.framework.game.WarTeam;
+import sbs.mira.pvp.framework.stored.SerializedLocation;
+import sbs.mira.pvp.game.Gamemode;
+import sbs.mira.pvp.game.Map;
 import org.bukkit.ChatColor;
 import org.bukkit.Material;
 import org.bukkit.entity.Player;
diff --git a/src/sbs/mira/pvp/maps/GibsonDesertWars.java b/src/sbs/mira/pvp/maps/GibsonDesertWars.java
index d3a898c..db5af79 100644
--- a/src/sbs/mira/pvp/maps/GibsonDesertWars.java
+++ b/src/sbs/mira/pvp/maps/GibsonDesertWars.java
@@ -1,11 +1,11 @@
-package au.edu.swin.war.maps;
+package sbs.mira.pvp.maps;
 
-import au.edu.swin.war.framework.WarPlayer;
-import au.edu.swin.war.framework.game.WarTeam;
-import au.edu.swin.war.framework.stored.SerializedLocation;
-import au.edu.swin.war.game.Gamemode;
-import au.edu.swin.war.game.Map;
-import au.edu.swin.war.game.modes.DTM;
+import sbs.mira.pvp.framework.WarPlayer;
+import sbs.mira.pvp.framework.game.WarTeam;
+import sbs.mira.pvp.framework.stored.SerializedLocation;
+import sbs.mira.pvp.game.Gamemode;
+import sbs.mira.pvp.game.Map;
+import sbs.mira.pvp.game.modes.DTM;
 import org.bukkit.ChatColor;
 import org.bukkit.Material;
 import org.bukkit.inventory.ItemStack;
diff --git a/src/sbs/mira/pvp/maps/MaplebankWoods.java b/src/sbs/mira/pvp/maps/MaplebankWoods.java
index f99b248..a51db43 100644
--- a/src/sbs/mira/pvp/maps/MaplebankWoods.java
+++ b/src/sbs/mira/pvp/maps/MaplebankWoods.java
@@ -1,12 +1,12 @@
-package au.edu.swin.war.maps;
+package sbs.mira.pvp.maps;
 
-import au.edu.swin.war.framework.WarPlayer;
-import au.edu.swin.war.framework.game.WarTeam;
-import au.edu.swin.war.framework.stored.SerializedLocation;
-import au.edu.swin.war.game.Gamemode;
-import au.edu.swin.war.game.Map;
-import au.edu.swin.war.game.modes.DTM;
-import au.edu.swin.war.game.util.SpawnArea;
+import sbs.mira.pvp.framework.WarPlayer;
+import sbs.mira.pvp.framework.game.WarTeam;
+import sbs.mira.pvp.framework.stored.SerializedLocation;
+import sbs.mira.pvp.game.Gamemode;
+import sbs.mira.pvp.game.Map;
+import sbs.mira.pvp.game.modes.DTM;
+import sbs.mira.pvp.game.util.SpawnArea;
 import org.bukkit.ChatColor;
 import org.bukkit.Material;
 import org.bukkit.inventory.ItemStack;
diff --git a/src/sbs/mira/pvp/maps/Mutiny.java b/src/sbs/mira/pvp/maps/Mutiny.java
index bfe928d..f8ec57b 100644
--- a/src/sbs/mira/pvp/maps/Mutiny.java
+++ b/src/sbs/mira/pvp/maps/Mutiny.java
@@ -1,12 +1,12 @@
-package au.edu.swin.war.maps;
+package sbs.mira.pvp.maps;
 
-import au.edu.swin.war.framework.WarPlayer;
-import au.edu.swin.war.framework.game.WarTeam;
-import au.edu.swin.war.framework.stored.SerializedLocation;
-import au.edu.swin.war.game.Gamemode;
-import au.edu.swin.war.game.Map;
-import au.edu.swin.war.game.util.AntiTeamGrief;
-import au.edu.swin.war.game.util.SpawnArea;
+import sbs.mira.pvp.framework.WarPlayer;
+import sbs.mira.pvp.framework.game.WarTeam;
+import sbs.mira.pvp.framework.stored.SerializedLocation;
+import sbs.mira.pvp.game.Gamemode;
+import sbs.mira.pvp.game.Map;
+import sbs.mira.pvp.game.util.AntiTeamGrief;
+import sbs.mira.pvp.game.util.SpawnArea;
 import org.bukkit.ChatColor;
 import org.bukkit.Material;
 import org.bukkit.inventory.ItemStack;
diff --git a/src/sbs/mira/pvp/maps/Roseley.java b/src/sbs/mira/pvp/maps/Roseley.java
index e9a91dc..ad7593b 100644
--- a/src/sbs/mira/pvp/maps/Roseley.java
+++ b/src/sbs/mira/pvp/maps/Roseley.java
@@ -1,12 +1,12 @@
-package au.edu.swin.war.maps;
+package sbs.mira.pvp.maps;
 
-import au.edu.swin.war.framework.WarPlayer;
-import au.edu.swin.war.framework.game.WarTeam;
-import au.edu.swin.war.framework.stored.SerializedLocation;
-import au.edu.swin.war.game.Gamemode;
-import au.edu.swin.war.game.Map;
-import au.edu.swin.war.game.util.RadialSpawnPoint;
-import au.edu.swin.war.game.util.SpawnArea;
+import sbs.mira.pvp.framework.WarPlayer;
+import sbs.mira.pvp.framework.game.WarTeam;
+import sbs.mira.pvp.framework.stored.SerializedLocation;
+import sbs.mira.pvp.game.Gamemode;
+import sbs.mira.pvp.game.Map;
+import sbs.mira.pvp.game.util.RadialSpawnPoint;
+import sbs.mira.pvp.game.util.SpawnArea;
 import org.bukkit.ChatColor;
 import org.bukkit.Location;
 import org.bukkit.Material;
diff --git a/src/sbs/mira/pvp/maps/SanguineShores.java b/src/sbs/mira/pvp/maps/SanguineShores.java
index 6bb14d8..fb69297 100644
--- a/src/sbs/mira/pvp/maps/SanguineShores.java
+++ b/src/sbs/mira/pvp/maps/SanguineShores.java
@@ -1,11 +1,11 @@
-package au.edu.swin.war.maps;
-
-import au.edu.swin.war.framework.WarPlayer;
-import au.edu.swin.war.framework.game.WarTeam;
-import au.edu.swin.war.framework.stored.SerializedLocation;
-import au.edu.swin.war.game.Gamemode;
-import au.edu.swin.war.game.Map;
-import au.edu.swin.war.game.util.SpawnArea;
+package sbs.mira.pvp.maps;
+
+import sbs.mira.pvp.framework.WarPlayer;
+import sbs.mira.pvp.framework.game.WarTeam;
+import sbs.mira.pvp.framework.stored.SerializedLocation;
+import sbs.mira.pvp.game.Gamemode;
+import sbs.mira.pvp.game.Map;
+import sbs.mira.pvp.game.util.SpawnArea;
 import org.bukkit.ChatColor;
 import org.bukkit.Material;
 import org.bukkit.inventory.ItemStack;
diff --git a/src/sbs/mira/pvp/maps/SanguineShoresII.java b/src/sbs/mira/pvp/maps/SanguineShoresII.java
index 294c2c2..5bbfd29 100644
--- a/src/sbs/mira/pvp/maps/SanguineShoresII.java
+++ b/src/sbs/mira/pvp/maps/SanguineShoresII.java
@@ -1,12 +1,12 @@
-package au.edu.swin.war.maps;
+package sbs.mira.pvp.maps;
 
-import au.edu.swin.war.framework.WarPlayer;
-import au.edu.swin.war.framework.game.WarTeam;
-import au.edu.swin.war.framework.stored.SerializedLocation;
-import au.edu.swin.war.game.Gamemode;
-import au.edu.swin.war.game.Map;
-import au.edu.swin.war.game.util.RadialSpawnPoint;
-import au.edu.swin.war.game.util.SpawnArea;
+import sbs.mira.pvp.framework.WarPlayer;
+import sbs.mira.pvp.framework.game.WarTeam;
+import sbs.mira.pvp.framework.stored.SerializedLocation;
+import sbs.mira.pvp.game.Gamemode;
+import sbs.mira.pvp.game.Map;
+import sbs.mira.pvp.game.util.RadialSpawnPoint;
+import sbs.mira.pvp.game.util.SpawnArea;
 import org.bukkit.ChatColor;
 import org.bukkit.Material;
 import org.bukkit.inventory.ItemStack;
diff --git a/src/sbs/mira/pvp/maps/Squared.java b/src/sbs/mira/pvp/maps/Squared.java
index 380f2e0..867d884 100644
--- a/src/sbs/mira/pvp/maps/Squared.java
+++ b/src/sbs/mira/pvp/maps/Squared.java
@@ -1,12 +1,12 @@
-package au.edu.swin.war.maps;
+package sbs.mira.pvp.maps;
 
-import au.edu.swin.war.framework.WarPlayer;
-import au.edu.swin.war.framework.game.WarTeam;
-import au.edu.swin.war.framework.stored.SerializedLocation;
-import au.edu.swin.war.game.Gamemode;
-import au.edu.swin.war.game.Map;
-import au.edu.swin.war.game.modes.DTM;
-import au.edu.swin.war.game.util.SpawnArea;
+import sbs.mira.pvp.framework.WarPlayer;
+import sbs.mira.pvp.framework.game.WarTeam;
+import sbs.mira.pvp.framework.stored.SerializedLocation;
+import sbs.mira.pvp.game.Gamemode;
+import sbs.mira.pvp.game.Map;
+import sbs.mira.pvp.game.modes.DTM;
+import sbs.mira.pvp.game.util.SpawnArea;
 import org.bukkit.ChatColor;
 import org.bukkit.Material;
 import org.bukkit.inventory.ItemStack;
diff --git a/src/sbs/mira/pvp/maps/TheRebellion.java b/src/sbs/mira/pvp/maps/TheRebellion.java
index 59ead18..3498797 100644
--- a/src/sbs/mira/pvp/maps/TheRebellion.java
+++ b/src/sbs/mira/pvp/maps/TheRebellion.java
@@ -1,12 +1,12 @@
-package au.edu.swin.war.maps;
+package sbs.mira.pvp.maps;
 
-import au.edu.swin.war.framework.WarPlayer;
-import au.edu.swin.war.framework.game.WarTeam;
-import au.edu.swin.war.framework.stored.SerializedLocation;
-import au.edu.swin.war.game.Gamemode;
-import au.edu.swin.war.game.Map;
-import au.edu.swin.war.game.modes.DTM;
-import au.edu.swin.war.game.util.SpawnArea;
+import sbs.mira.pvp.framework.WarPlayer;
+import sbs.mira.pvp.framework.game.WarTeam;
+import sbs.mira.pvp.framework.stored.SerializedLocation;
+import sbs.mira.pvp.game.Gamemode;
+import sbs.mira.pvp.game.Map;
+import sbs.mira.pvp.game.modes.DTM;
+import sbs.mira.pvp.game.util.SpawnArea;
 import org.bukkit.ChatColor;
 import org.bukkit.Material;
 import org.bukkit.inventory.ItemStack;
diff --git a/src/sbs/mira/pvp/maps/Xenon.java b/src/sbs/mira/pvp/maps/Xenon.java
index 57d6e91..474f9f8 100644
--- a/src/sbs/mira/pvp/maps/Xenon.java
+++ b/src/sbs/mira/pvp/maps/Xenon.java
@@ -1,10 +1,10 @@
-package au.edu.swin.war.maps;
+package sbs.mira.pvp.maps;
 
-import au.edu.swin.war.framework.WarPlayer;
-import au.edu.swin.war.framework.game.WarTeam;
-import au.edu.swin.war.framework.stored.SerializedLocation;
-import au.edu.swin.war.game.Gamemode;
-import au.edu.swin.war.game.Map;
+import sbs.mira.pvp.framework.WarPlayer;
+import sbs.mira.pvp.framework.game.WarTeam;
+import sbs.mira.pvp.framework.stored.SerializedLocation;
+import sbs.mira.pvp.game.Gamemode;
+import sbs.mira.pvp.game.Map;
 import org.bukkit.ChatColor;
 import org.bukkit.Location;
 import org.bukkit.Material;
diff --git a/src/sbs/mira/pvp/stats/Database.java b/src/sbs/mira/pvp/stats/Database.java
index 29f95eb..c609ce3 100644
--- a/src/sbs/mira/pvp/stats/Database.java
+++ b/src/sbs/mira/pvp/stats/Database.java
@@ -1,6 +1,6 @@
-package au.edu.swin.war.stats;
+package sbs.mira.pvp.stats;
 
-import au.edu.swin.war.framework.WarPlugin;
+import sbs.mira.pvp.framework.MiraPlugin;
 import org.bukkit.Bukkit;
 import org.bukkit.configuration.ConfigurationSection;
 
@@ -19,9 +19,9 @@ public class Database {
     private final String pass;
     private final String url;
     private Connection connection;
-    private final WarPlugin plugin;
+    private final MiraPlugin plugin;
 
-    public Database(WarPlugin instance) {
+    public Database(MiraPlugin instance) {
         ConfigurationSection config = instance.getConfig().getConfigurationSection("database");
         this.user = config.getString("username");
         this.pass = config.getString("password");
diff --git a/src/sbs/mira/pvp/stats/Preparable.java b/src/sbs/mira/pvp/stats/Preparable.java
index ade517e..5d201d3 100644
--- a/src/sbs/mira/pvp/stats/Preparable.java
+++ b/src/sbs/mira/pvp/stats/Preparable.java
@@ -1,4 +1,4 @@
-package au.edu.swin.war.stats;
+package sbs.mira.pvp.stats;
 
 /**
  * Runs a preparable thing.
diff --git a/src/sbs/mira/pvp/stats/WarStats.java b/src/sbs/mira/pvp/stats/WarStats.java
index 5ace047..4d33b73 100644
--- a/src/sbs/mira/pvp/stats/WarStats.java
+++ b/src/sbs/mira/pvp/stats/WarStats.java
@@ -1,6 +1,7 @@
-package au.edu.swin.war.stats;
+package sbs.mira.pvp.stats;
 
-import au.edu.swin.war.util.Manager;
+import sbs.mira.pvp.MiraPvp;
+import sbs.mira.pvp.framework.WarPlayer;
 
 import java.sql.PreparedStatement;
 import java.sql.SQLException;
@@ -10,11 +11,11 @@ import java.util.UUID;
  * An object designed to record, modify,
  * and retrieve stats for a designated player.
  *
- * @see au.edu.swin.war.framework.WarPlayer
+ * @see WarPlayer
  */
 public class WarStats {
 
-    private final Manager main;
+    private final MiraPvp main;
     private final UUID owner;
 
     private int kills, deaths, highestStreak, currentStreak, matchesPlayed, revives;
@@ -29,7 +30,7 @@ public class WarStats {
      * @param matchesWon    Current killstreak.
      * @param revives       Amount of revives remaining.
      */
-    public WarStats(Manager main, UUID owner, int kills, int deaths, int highestStreak, int matchesWon, int revives) {
+    public WarStats(MiraPvp main, UUID owner, int kills, int deaths, int highestStreak, int matchesWon, int revives) {
         this.main = main;
         this.owner = owner;
         this.kills = kills;
@@ -45,7 +46,7 @@ public class WarStats {
      *
      * @param owner Owner of this stats record.
      */
-    public WarStats(Manager main, UUID owner) {
+    public WarStats(MiraPvp main, UUID owner) {
         this.main = main;
         this.owner = owner;
         this.kills = 0;
diff --git a/src/sbs/mira/pvp/util/Cache.java b/src/sbs/mira/pvp/util/Cache.java
index 717cf08..840aef7 100644
--- a/src/sbs/mira/pvp/util/Cache.java
+++ b/src/sbs/mira/pvp/util/Cache.java
@@ -1,11 +1,14 @@
-package au.edu.swin.war.util;
+package sbs.mira.pvp.util;
 
-import au.edu.swin.war.framework.util.WarCache;
-import au.edu.swin.war.framework.util.WarManager;
-import au.edu.swin.war.game.Gamemode;
-import au.edu.swin.war.game.Map;
+import sbs.mira.pvp.MiraPvp;
+import sbs.mira.pvp.framework.util.WarCache;
+import sbs.mira.pvp.framework.util.Mira;
+import sbs.mira.pvp.game.Gamemode;
+import sbs.mira.pvp.game.Map;
 import au.edu.swin.war.game.modes.*;
 import au.edu.swin.war.maps.*;
+import sbs.mira.pvp.game.modes.*;
+import sbs.mira.pvp.maps.*;
 
 /**
  * An extension to WarCache.
@@ -13,7 +16,7 @@ import au.edu.swin.war.maps.*;
  *
  * @author s101601828 @ Swin.
  * @version 1.0
- * @see WarManager
+ * @see Mira
  * <p>
  * Created by Josh on 20/04/2017.
  * @since 1.0
@@ -27,7 +30,7 @@ public class Cache extends WarCache {
      *
      * @param main The supercontroller.
      */
-    Cache(Manager main) {
+    Cache(MiraPvp main) {
         super(main);
     }
 
diff --git a/src/sbs/mira/pvp/util/Guard.java b/src/sbs/mira/pvp/util/Guard.java
index d7cf472..2cd818a 100644
--- a/src/sbs/mira/pvp/util/Guard.java
+++ b/src/sbs/mira/pvp/util/Guard.java
@@ -1,9 +1,10 @@
-package au.edu.swin.war.util;
+package sbs.mira.pvp.util;
 
-import au.edu.swin.war.framework.WarPlayer;
-import au.edu.swin.war.framework.util.WarManager;
-import au.edu.swin.war.framework.util.WarMatch;
-import au.edu.swin.war.framework.util.WarModule;
+import sbs.mira.pvp.MiraPvp;
+import sbs.mira.pvp.framework.WarPlayer;
+import sbs.mira.pvp.framework.util.Mira;
+import sbs.mira.pvp.framework.util.WarMatch;
+import sbs.mira.pvp.framework.util.WarModule;
 import com.google.common.io.ByteArrayDataOutput;
 import com.google.common.io.ByteStreams;
 import io.netty.buffer.ByteBuf;
@@ -60,7 +61,7 @@ import java.util.List;
  */
 public class Guard extends WarModule implements Listener {
 
-    Guard(WarManager main) {
+    Guard(Mira main) {
         super(main);
         main().plugin().getServer().getPluginManager().registerEvents(this, main().plugin());
     }
@@ -131,12 +132,12 @@ public class Guard extends WarModule implements Listener {
             if (event.getPlayer().getItemInHand().getType() == Material.WRITTEN_BOOK)
                 openBook(event.getPlayer());
         }
-        if (event.getPlayer().getItemInHand().equals(((Manager) main()).SKYBLOCK)) {
+        if (event.getPlayer().getItemInHand().equals(((MiraPvp) main()).SKYBLOCK)) {
             ByteArrayDataOutput out = ByteStreams.newDataOutput();
             out.writeUTF("Connect");
             out.writeUTF("skyblock");
             event.getPlayer().sendPluginMessage(main().plugin(), "BungeeCord", out.toByteArray());
-        } else if (event.getPlayer().getItemInHand().equals(((Manager) main()).VOTE)) {
+        } else if (event.getPlayer().getItemInHand().equals(((MiraPvp) main()).VOTE)) {
             TextComponent cmp = new TextComponent("   \n    " + ChatColor.GREEN + "[Voting Link 1]");
             cmp.setHoverEvent(new HoverEvent(HoverEvent.Action.SHOW_TEXT, new ComponentBuilder("**click me**").create()));
             cmp.setClickEvent(new ClickEvent(ClickEvent.Action.OPEN_URL, "http://bit.ly/2CC6zF4"));
diff --git a/src/sbs/mira/pvp/util/Match.java b/src/sbs/mira/pvp/util/Match.java
index 95fd198..6b55356 100644
--- a/src/sbs/mira/pvp/util/Match.java
+++ b/src/sbs/mira/pvp/util/Match.java
@@ -1,10 +1,11 @@
-package au.edu.swin.war.util;
-
-import au.edu.swin.war.framework.WarPlayer;
-import au.edu.swin.war.framework.game.WarMap;
-import au.edu.swin.war.framework.util.WarMatch;
-import au.edu.swin.war.game.Gamemode;
-import au.edu.swin.war.game.Map;
+package sbs.mira.pvp.util;
+
+import sbs.mira.pvp.MiraPvp;
+import sbs.mira.pvp.framework.WarPlayer;
+import sbs.mira.pvp.framework.game.WarMap;
+import sbs.mira.pvp.framework.util.WarMatch;
+import sbs.mira.pvp.game.Gamemode;
+import sbs.mira.pvp.game.Map;
 import org.bukkit.*;
 import org.bukkit.entity.Player;
 import org.bukkit.scheduler.BukkitRunnable;
@@ -49,7 +50,7 @@ public class Match extends WarMatch {
      *
      * @param main Running instance of Manager.
      */
-    Match(Manager main) {
+    Match(MiraPvp main) {
         super(main);
         this.votes = new HashMap<>();
         this.voted = new ArrayList<>();
@@ -167,7 +168,7 @@ public class Match extends WarMatch {
                         int count2 = 8;
                         if (count2 > Bukkit.getOnlinePlayers().size()) count2 = Bukkit.getOnlinePlayers().size();
                         while (count2 > 0) {
-                            ((Manager) main()).entity().spawnFirework(getCurrentWorld().getPlayers().get(
+                            ((MiraPvp) main()).entity().spawnFirework(getCurrentWorld().getPlayers().get(
                                     new Random().nextInt(getCurrentWorld().getPlayers().size())).getLocation());
                             // Spawn a random firework at 8 people's locations.
                             // If there is less than 8 people online, then the amount of people online instead.
@@ -231,7 +232,7 @@ public class Match extends WarMatch {
 
             public void run() {
                 if (time == voteTime) {
-                    Bukkit.broadcastMessage(main()._("votes.starting"));
+                    Bukkit.broadcastMessage(main().message("votes.starting"));
                     for (WarPlayer online : main().getWarPlayers().values())
                         online.getPlayer().spigot().sendMessage(Gamemode.Mode.format(getRunningMap().getGamemodes(), main()));
                 } else if (time == 0) {
@@ -267,7 +268,7 @@ public class Match extends WarMatch {
         voted.clear();
         setCurrentMode(main().cache().getGamemode(winningVote.getFullName()));
 
-        Bukkit.broadcastMessage(main()._("votes.next", getCurrentMode().getGrammar(), getCurrentMode().getName(), getCurrentMap()));
+        Bukkit.broadcastMessage(main().message("votes.next", getCurrentMode().getGrammar(), getCurrentMode().getName(), getCurrentMap()));
 
         // Set the state to starting and perform starting logic.
         main().world().loadMap(getCurrentMap(), getRawRoundID());
@@ -371,7 +372,7 @@ public class Match extends WarMatch {
         // Set the match state to cycling.
         setStatus(Status.CYCLE);
 
-        ((Manager) main()).respawn().clear();
+        ((MiraPvp) main()).respawn().clear();
         // Fix everyone back up.
         for (WarPlayer pl : main().getWarPlayers().values()) {
             // Force respawn everyone using the Spigot entity API.
diff --git a/src/sbs/mira/pvp/util/StatsListener.java b/src/sbs/mira/pvp/util/StatsListener.java
index a5fe011..c7cbcf5 100644
--- a/src/sbs/mira/pvp/util/StatsListener.java
+++ b/src/sbs/mira/pvp/util/StatsListener.java
@@ -1,14 +1,15 @@
-package au.edu.swin.war.util;
-
-import au.edu.swin.war.WarPlayerPlus;
-import au.edu.swin.war.framework.WarPlayer;
-import au.edu.swin.war.framework.event.MatchEndEvent;
-import au.edu.swin.war.framework.event.MatchPlayerDeathEvent;
-import au.edu.swin.war.framework.util.WarManager;
-import au.edu.swin.war.framework.util.WarMatch;
-import au.edu.swin.war.framework.util.WarModule;
-import au.edu.swin.war.game.Map;
-import au.edu.swin.war.stats.WarStats;
+package sbs.mira.pvp.util;
+
+import sbs.mira.pvp.MiraPvp;
+import sbs.mira.pvp.WarPlayerPlus;
+import sbs.mira.pvp.framework.WarPlayer;
+import sbs.mira.pvp.framework.event.MatchEndEvent;
+import sbs.mira.pvp.framework.event.MatchPlayerDeathEvent;
+import sbs.mira.pvp.framework.util.Mira;
+import sbs.mira.pvp.framework.util.WarMatch;
+import sbs.mira.pvp.framework.util.WarModule;
+import sbs.mira.pvp.game.Map;
+import sbs.mira.pvp.stats.WarStats;
 import com.vexsoftware.votifier.model.VotifierEvent;
 import org.bukkit.*;
 import org.bukkit.attribute.Attribute;
@@ -41,7 +42,7 @@ import static org.bukkit.ChatColor.*;
  */
 public class StatsListener extends WarModule implements Listener {
 
-    StatsListener(WarManager main) {
+    StatsListener(Mira main) {
         super(main);
         main().plugin().getServer().getPluginManager().registerEvents(this, main().plugin());
         this.votes = new HashMap<>();
@@ -87,19 +88,19 @@ public class StatsListener extends WarModule implements Listener {
         try {
 
             // Checks if the player has stats recorded already.
-            PreparedStatement stats = ((Manager) main()).query().prepare("SELECT * FROM `WarStats` WHERE `player_uuid`=?");
+            PreparedStatement stats = ((MiraPvp) main()).query().prepare("SELECT * FROM `WarStats` WHERE `player_uuid`=?");
             stats.setString(1, event.getUniqueId().toString());
             ResultSet check = stats.executeQuery(); // Execute the check and get our result.
 
             if (check.next()) {
                 main().plugin().log(event.getName() + " had previous stats, retrieving...");
-                ((Manager) main()).putTempStats(event.getUniqueId(), new WarStats((Manager) main(), event.getUniqueId(),
+                ((MiraPvp) main()).putTempStats(event.getUniqueId(), new WarStats((MiraPvp) main(), event.getUniqueId(),
                         check.getInt("kills"), check.getInt("deaths"),
                         check.getInt("highestStreak"), check.getInt("matchesPlayed"),
                         check.getInt("revives")));
             } else {
                 main().plugin().log("Creating statistics record for " + event.getName());
-                PreparedStatement newStats = ((Manager) main()).query().prepare("INSERT INTO `WarStats` (`player_uuid`) VALUES (?)");
+                PreparedStatement newStats = ((MiraPvp) main()).query().prepare("INSERT INTO `WarStats` (`player_uuid`) VALUES (?)");
                 newStats.setString(1, event.getUniqueId().toString());
                 newStats.executeUpdate(); // Execute our insertion query.
                 newStats.close(); // Close the prepared statement.
@@ -108,7 +109,7 @@ public class StatsListener extends WarModule implements Listener {
             check.close(); // Close this one too.
         } catch (SQLException e) {
             event.setLoginResult(AsyncPlayerPreLoginEvent.Result.KICK_OTHER);
-            event.setKickMessage(main()._("prelogin.error"));
+            event.setKickMessage(main().message("prelogin.error"));
             main().plugin().log("Unable to generate statistics for " + event.getUniqueId() + "!");
             e.printStackTrace();
         }
@@ -171,13 +172,13 @@ public class StatsListener extends WarModule implements Listener {
             Player target = event.getKiller().getPlayer();
             if (killer.getCurrentStreak() % 5 == 0) {
                 target.playSound(target.getLocation(), Sound.ENTITY_VEX_CHARGE, 1F, 1F);
-                target.sendMessage(main()._("killstreaks.status", killer.getCurrentStreak()));
+                target.sendMessage(main().message("killstreaks.status", killer.getCurrentStreak()));
             }
             if (killer.getCurrentStreak() == 10) {
                 target.playSound(target.getLocation(), Sound.ENTITY_PARROT_IMITATE_ENDERDRAGON, 1F, 1F);
                 target.addPotionEffect(new PotionEffect(PotionEffectType.FIRE_RESISTANCE, 5 * 20, 0));
                 target.setFireTicks(100);
-                target.sendMessage(main()._("killstreaks.onfire", target.getDisplayName()));
+                target.sendMessage(main().message("killstreaks.onfire", target.getDisplayName()));
             }
             target.getWorld().spawnParticle(Particle.TOTEM, target.getLocation(), 70);
         }
@@ -225,12 +226,12 @@ public class StatsListener extends WarModule implements Listener {
         // Do the broadcast. Don't broadcast how many times they voted, though.
         for (Player online : Bukkit.getOnlinePlayers())
             if (!online.equals(target))
-                online.sendMessage(main()._("votifier.others", target.getDisplayName()));
+                online.sendMessage(main().message("votifier.others", target.getDisplayName()));
             else
-                online.sendMessage(main()._("votifier.self"));
+                online.sendMessage(main().message("votifier.self"));
 
         // Spawn a congratulatory firework.
-        ((Manager) main()).entity().spawnFirework(target.getLocation());
+        ((MiraPvp) main()).entity().spawnFirework(target.getLocation());
         ((WarPlayerPlus) main().getWarPlayer(target)).stats().addRevive();
     }
 }
\ No newline at end of file
diff --git a/src/sbs/mira/pvp/util/WoolColor.java b/src/sbs/mira/pvp/util/WoolColor.java
index 813a2c8..7699964 100644
--- a/src/sbs/mira/pvp/util/WoolColor.java
+++ b/src/sbs/mira/pvp/util/WoolColor.java
@@ -1,4 +1,4 @@
-package au.edu.swin.war.util;
+package sbs.mira.pvp.util;
 
 import org.bukkit.ChatColor;
 
diff --git a/src/sbs/mira/pvp/util/modules/ChatUtility.java b/src/sbs/mira/pvp/util/modules/ChatUtility.java
index b65d9d9..ef35021 100644
--- a/src/sbs/mira/pvp/util/modules/ChatUtility.java
+++ b/src/sbs/mira/pvp/util/modules/ChatUtility.java
@@ -1,7 +1,7 @@
-package au.edu.swin.war.util.modules;
+package sbs.mira.pvp.util.modules;
 
-import au.edu.swin.war.framework.util.WarManager;
-import au.edu.swin.war.framework.util.WarModule;
+import sbs.mira.pvp.framework.util.Mira;
+import sbs.mira.pvp.framework.util.WarModule;
 import org.bukkit.ChatColor;
 import org.bukkit.entity.Player;
 import org.bukkit.inventory.ItemStack;
@@ -20,7 +20,7 @@ public class ChatUtility extends WarModule {
 
     private final int CENTER_PX = 154;
 
-    protected ChatUtility(WarManager main) {
+    protected ChatUtility(Mira main) {
         super(main);
     }
 
diff --git a/src/sbs/mira/pvp/util/modules/CommandUtility.java b/src/sbs/mira/pvp/util/modules/CommandUtility.java
index 692abc9..c741b85 100644
--- a/src/sbs/mira/pvp/util/modules/CommandUtility.java
+++ b/src/sbs/mira/pvp/util/modules/CommandUtility.java
@@ -1,14 +1,14 @@
-package au.edu.swin.war.util.modules;
+package sbs.mira.pvp.util.modules;
 
-import au.edu.swin.war.framework.WarPlayer;
-import au.edu.swin.war.framework.game.WarMap;
-import au.edu.swin.war.framework.game.WarTeam;
-import au.edu.swin.war.framework.util.WarMatch;
-import au.edu.swin.war.framework.util.WarModule;
-import au.edu.swin.war.game.Gamemode;
-import au.edu.swin.war.util.Cache;
-import au.edu.swin.war.util.Manager;
-import au.edu.swin.war.util.Match;
+import sbs.mira.pvp.framework.WarPlayer;
+import sbs.mira.pvp.framework.game.WarMap;
+import sbs.mira.pvp.framework.game.WarTeam;
+import sbs.mira.pvp.framework.util.WarMatch;
+import sbs.mira.pvp.framework.util.WarModule;
+import sbs.mira.pvp.game.Gamemode;
+import sbs.mira.pvp.util.Cache;
+import sbs.mira.pvp.MiraPvp;
+import sbs.mira.pvp.util.Match;
 import com.sk89q.minecraft.util.commands.*;
 import net.md_5.bungee.api.chat.TextComponent;
 import org.bukkit.Bukkit;
@@ -29,7 +29,7 @@ import org.bukkit.entity.Player;
 public class CommandUtility extends WarModule {
 
     @SuppressWarnings("unused") // This is used, just not directly.
-    public CommandUtility(Manager main) {
+    public CommandUtility(MiraPvp main) {
         super(main);
     }
 
@@ -107,7 +107,7 @@ public class CommandUtility extends WarModule {
             sender.sendMessage("You will no longer automatically join the next round.");
         else {
             main().match().getCurrentMode().entryHandle(wp); // If applicable, handle their entry.
-            ((Manager) main()).respawn().clearFor(wp); // Clear their respawning info if they have any.
+            ((MiraPvp) main()).respawn().clearFor(wp); // Clear their respawning info if they have any.
         }
     }
 
diff --git a/src/sbs/mira/pvp/util/modules/ConfigUtility.java b/src/sbs/mira/pvp/util/modules/ConfigUtility.java
index bd60301..7ddf74d 100644
--- a/src/sbs/mira/pvp/util/modules/ConfigUtility.java
+++ b/src/sbs/mira/pvp/util/modules/ConfigUtility.java
@@ -1,8 +1,8 @@
-package au.edu.swin.war.util.modules;
+package sbs.mira.pvp.util.modules;
 
 
-import au.edu.swin.war.framework.util.WarManager;
-import au.edu.swin.war.framework.util.WarModule;
+import sbs.mira.pvp.framework.util.Mira;
+import sbs.mira.pvp.framework.util.WarModule;
 import org.bukkit.Bukkit;
 import org.bukkit.configuration.file.FileConfiguration;
 import org.bukkit.configuration.file.YamlConfiguration;
@@ -38,7 +38,7 @@ public class ConfigUtility extends WarModule {
      *
      * @param main The supercontroller.
      */
-    public ConfigUtility(WarManager main) {
+    public ConfigUtility(Mira main) {
         super(main);
 
         // Save the default config in case it has never existed before.
diff --git a/src/sbs/mira/pvp/util/modules/EntityUtility.java b/src/sbs/mira/pvp/util/modules/EntityUtility.java
index eb994f2..6971340 100644
--- a/src/sbs/mira/pvp/util/modules/EntityUtility.java
+++ b/src/sbs/mira/pvp/util/modules/EntityUtility.java
@@ -1,8 +1,8 @@
-package au.edu.swin.war.util.modules;
+package sbs.mira.pvp.util.modules;
 
 
-import au.edu.swin.war.framework.util.WarManager;
-import au.edu.swin.war.framework.util.WarModule;
+import sbs.mira.pvp.framework.util.Mira;
+import sbs.mira.pvp.framework.util.WarModule;
 import org.bukkit.ChatColor;
 import org.bukkit.Color;
 import org.bukkit.FireworkEffect;
@@ -36,7 +36,7 @@ public class EntityUtility extends WarModule {
      *
      * @param main The supercontroller.
      */
-    public EntityUtility(WarManager main) {
+    public EntityUtility(Mira main) {
         super(main);
         this.rng = new Random();
     }
diff --git a/src/sbs/mira/pvp/util/modules/QueryUtility.java b/src/sbs/mira/pvp/util/modules/QueryUtility.java
index 01383de..fd084c9 100644
--- a/src/sbs/mira/pvp/util/modules/QueryUtility.java
+++ b/src/sbs/mira/pvp/util/modules/QueryUtility.java
@@ -1,10 +1,10 @@
-package au.edu.swin.war.util.modules;
+package sbs.mira.pvp.util.modules;
 
-import au.edu.swin.war.framework.WarPlugin;
-import au.edu.swin.war.framework.util.WarManager;
-import au.edu.swin.war.framework.util.WarModule;
-import au.edu.swin.war.stats.Database;
-import au.edu.swin.war.stats.Preparable;
+import sbs.mira.pvp.framework.MiraPlugin;
+import sbs.mira.pvp.framework.util.Mira;
+import sbs.mira.pvp.framework.util.WarModule;
+import sbs.mira.pvp.stats.Database;
+import sbs.mira.pvp.stats.Preparable;
 import org.bukkit.scheduler.BukkitRunnable;
 import org.bukkit.scheduler.BukkitTask;
 
@@ -30,7 +30,7 @@ public class QueryUtility extends WarModule {
     private final Database db;
     private BukkitTask thread;
 
-    public QueryUtility(WarManager main, boolean enabled) {
+    public QueryUtility(Mira main, boolean enabled) {
         super(main);
         queries = new ConcurrentLinkedQueue<>();
 
@@ -75,7 +75,7 @@ public class QueryUtility extends WarModule {
      *
      * @param plugin The plugin to execute the BukkitRunnable with.
      */
-    private void saveThread(WarPlugin plugin) {
+    private void saveThread(MiraPlugin plugin) {
         thread = new BukkitRunnable() {
             int counter = 2000;
 
diff --git a/src/sbs/mira/pvp/util/modules/RespawnUtility.java b/src/sbs/mira/pvp/util/modules/RespawnUtility.java
index ab8cf49..450828a 100644
--- a/src/sbs/mira/pvp/util/modules/RespawnUtility.java
+++ b/src/sbs/mira/pvp/util/modules/RespawnUtility.java
@@ -1,16 +1,16 @@
-package au.edu.swin.war.util.modules;
-
-import au.edu.swin.war.WarPlayerPlus;
-import au.edu.swin.war.event.MatchPlayerRespawnEvent;
-import au.edu.swin.war.framework.WarPlayer;
-import au.edu.swin.war.framework.util.WarMatch;
-import au.edu.swin.war.framework.util.WarModule;
-import au.edu.swin.war.util.Manager;
+package sbs.mira.pvp.util.modules;
+
+import sbs.mira.pvp.WarPlayerPlus;
+import sbs.mira.pvp.event.MatchPlayerRespawnEvent;
+import sbs.mira.pvp.framework.WarPlayer;
+import sbs.mira.pvp.framework.util.WarMatch;
+import sbs.mira.pvp.framework.util.WarModule;
+import sbs.mira.pvp.MiraPvp;
 import net.minecraft.server.v1_12_R1.DataWatcherObject;
 import net.minecraft.server.v1_12_R1.DataWatcherRegistry;
 import org.bukkit.Bukkit;
 import org.bukkit.GameMode;
-import org.bukkit.craftbukkit.v1_12_R1.entity.CraftPlayer;
+import org.bukkit.craftbukkit.v1_21_R5.entity.CraftPlayer;
 import org.bukkit.event.EventHandler;
 import org.bukkit.event.Listener;
 import org.bukkit.event.player.PlayerQuitEvent;
@@ -43,7 +43,7 @@ public class RespawnUtility extends WarModule implements Listener {
      *
      * @param main Running instance of Manager.
      */
-    public RespawnUtility(Manager main) {
+    public RespawnUtility(MiraPvp main) {
         super(main);
         main.plugin().getServer().getPluginManager().registerEvents(this, main.plugin());
 
diff --git a/src/sbs/mira/pvp/util/modules/StatsCommandUtility.java b/src/sbs/mira/pvp/util/modules/StatsCommandUtility.java
index a358640..330a2b5 100644
--- a/src/sbs/mira/pvp/util/modules/StatsCommandUtility.java
+++ b/src/sbs/mira/pvp/util/modules/StatsCommandUtility.java
@@ -1,9 +1,9 @@
-package au.edu.swin.war.util.modules;
+package sbs.mira.pvp.util.modules;
 
-import au.edu.swin.war.WarPlayerPlus;
-import au.edu.swin.war.framework.util.WarModule;
-import au.edu.swin.war.stats.WarStats;
-import au.edu.swin.war.util.Manager;
+import sbs.mira.pvp.WarPlayerPlus;
+import sbs.mira.pvp.framework.util.WarModule;
+import sbs.mira.pvp.stats.WarStats;
+import sbs.mira.pvp.MiraPvp;
 import com.sk89q.minecraft.util.commands.Command;
 import com.sk89q.minecraft.util.commands.CommandContext;
 import com.sk89q.minecraft.util.commands.CommandNumberFormatException;
@@ -39,7 +39,7 @@ import java.util.List;
 public class StatsCommandUtility extends WarModule {
 
     @SuppressWarnings("unused") // This is used, just not directly.
-    public StatsCommandUtility(Manager main) {
+    public StatsCommandUtility(MiraPvp main) {
         super(main);
     }
 
@@ -79,7 +79,7 @@ public class StatsCommandUtility extends WarModule {
             waiting.add(sender.getName());
             Bukkit.getScheduler().runTaskAsynchronously(main().plugin(), () -> {
                 try {
-                    PreparedStatement stmt = ((Manager) main()).query().prepare("SELECT * FROM `WarStats` NATURAL JOIN `Players` WHERE `player_uuid`=?");
+                    PreparedStatement stmt = ((MiraPvp) main()).query().prepare("SELECT * FROM `WarStats` NATURAL JOIN `Players` WHERE `player_uuid`=?");
                     stmt.setString(1, finalTarget.getUniqueId().toString());
                     ResultSet stats = stmt.executeQuery();
                     if (stats.next())
@@ -122,7 +122,7 @@ public class StatsCommandUtility extends WarModule {
         Bukkit.getScheduler().runTaskAsynchronously(main().plugin(), () -> {
             StringBuilder msg = new StringBuilder("\n--- Leaderboard Page " + page + " ---\n");
             try {
-                ResultSet lb = ((Manager) main()).query().prepare("SELECT * FROM `WarStats` NATURAL JOIN `Players` ORDER BY `kills` DESC LIMIT 10 OFFSET " + offset).executeQuery();
+                ResultSet lb = ((MiraPvp) main()).query().prepare("SELECT * FROM `WarStats` NATURAL JOIN `Players` ORDER BY `kills` DESC LIMIT 10 OFFSET " + offset).executeQuery();
                 for (int i = 0; i < 10; i++) {
                     if (!lb.next()) {
                         if (i != 9) msg.append(ChatColor.RED).append("No more results to display.\n");
